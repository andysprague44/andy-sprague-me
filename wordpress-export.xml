<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress.com" created="2025-05-13 12:45"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>andysprague.com</title>
	<link>https://andysprague.com</link>
	<description>Bitsized blogs without the bull</description>
	<pubDate>Tue, 13 May 2025 12:45:33 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://andysprague.com</wp:base_blog_url>

		<wp:author><wp:author_id>61767449</wp:author_id><wp:author_login><![CDATA[andysprague44]]></wp:author_login><wp:author_email><![CDATA[andy.sprague44@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[andysprague44]]></wp:author_display_name><wp:author_first_name><![CDATA[Andy]]></wp:author_first_name><wp:author_last_name><![CDATA[Sprague]]></wp:author_last_name></wp:author>

				
	<generator>http://wordpress.com/</generator>

<image>
	<url>https://andysprague.com/wp-content/uploads/2024/06/cropped-cropped-cropped-logo.png?w=32</url>
	<title>andysprague.com</title>
	<link>https://andysprague.com</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title><![CDATA[My First Blog]]></title>
		<link>https://andysprague.com/2017/01/29/my-first-blog/</link>
		<pubDate>Sun, 29 Jan 2017 20:41:09 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andyspraguedotcom.wordpress.com/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[It's not a long one.  Just to say welcome to my site.  Hope you enjoy coding and can at least stomach rugby, else you may be in for a long ride (actually, I'd advise just surfing off somewhere else if that's the case)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2017-01-29 20:41:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-01-29 20:41:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-01-29 23:19:04]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-01-29 23:19:04]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[my-first-blog]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[sharing_disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;i:1;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[switch_like_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;i:1;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1293879301]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[first-blog-post]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[36]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[My First Custom Excel Ribbon using Excel-DNA]]></title>
		<link>https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/</link>
		<pubDate>Fri, 03 Feb 2017 19:08:13 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andyspraguedotcom.wordpress.com/?p=50</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>What if we could write plugins for Excel using the power of C# instead of VBA?</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>What if we could target and maintain a plugin that is compatible with multiple excel versions, at the same time?</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>What if we could provide our users with their familiar Excel workflow but add custom options, template generation, database access, and dynamic menus?</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>What if I could create user defined worksheet functions (UDFs) that run fast and asynchronously?</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>… Enter Excel-DNA.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this blog I give a tutorial on getting started with Excel-DNA, a project to build excel add-ins using .NET.&nbsp; By the end you will have a new custom tab in your excel ribbon that contains a button.&nbsp; I will also show you how to debug this excel plugin by running the project directly from Visual Studio.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All code can be found at <a href="https://github.com/andysprague44/excel-dna-examples/tree/master/HelloWorld">https://github.com/andysprague44/excel-dna-examples/tree/master/HelloWorld</a></p>
<!-- /wp:paragraph -->

<!-- wp:separator {"opacity":"css"} -->
<hr class="wp-block-separator has-css-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">What is Excel-DNA?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Simply put, Excel-DNA is an independent open-source project to integrate .NET into Excel.&nbsp; If you were wondering, the 'DNA' stands for DotNet for Applications, as opposed to VBA standing for Visual Basic for Applications.&nbsp; The full introduction can be found at the home page on <a title="https://exceldna.codeplex.com/" href="https://exceldna.codeplex.com/">https://exceldna.codeplex.com/</a>.&nbsp;&nbsp; Some getting started instructions can be found at <a title="https://exceldna.codeplex.com/wikipage?title=Getting%20Started" href="https://exceldna.codeplex.com/wikipage?title=Getting%20Started">https://exceldna.codeplex.com/wikipage?title=Getting%20Started</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the above has stoked your curiosity, but you are already tied to a VBA add-in, this blog is not for you.&nbsp; Instead you need to switch, and for this you should visit the excellent blog at <a title="https://sysmod.wordpress.com/2012/11/06/migrating-an-excel-vba-add-in-to-a-vb-net-xll-with-excel-dna-update/" href="https://sysmod.wordpress.com/2012/11/06/migrating-an-excel-vba-add-in-to-a-vb-net-xll-with-excel-dna-update/">https://sysmod.wordpress.com/2012/11/06/migrating-an-excel-vba-add-in-to-a-vb-net-xll-with-excel-dna-update/</a></p>
<!-- /wp:paragraph -->

<!-- wp:separator {"opacity":"css"} -->
<hr class="wp-block-separator has-css-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Getting Set-Up</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Install Visual Studios, and add a new Class Library (.NET Framework) project called <em>MyExcelAddin</em>. (Note I'm using .net framework 4.7.2, but I'd be surprised if it didn't work from 4.5 onwards).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using the package manager console (Tools –&gt; NuGet Package Manager –&gt; Package Manager console) run the following:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">Install-Package ExcelDna.AddIn
Install-Package ExcelDna.Integration
Install-Package NetOfficeFw.Excel</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>This should have resulted in a new file being created at the project root called "MyExcelAddin-AddIn.dna". Leave it alone, but you don't need to understand the contents yet :) </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Building the ribbon</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To add a custom ribbon we need 2 additional files – an XML description of the new custom ribbon element, and a class that implements <em>ExcelDna.Integration.CustomUI.ExcelRibbon</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Add these both to the root folder of the project and call them ‘CustomRibbon.xml’ and ‘CustomRibbon.cs’</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>CustomRibbon.xml:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"xml"} -->
<pre class="wp-block-syntaxhighlighter-code">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;customUI xmlns="http://schemas.microsoft.com/office/2006/01/customui" onLoad="OnLoad"&gt;
  &lt;ribbon&gt;
    &lt;tabs&gt;
      &lt;tab id="MyFirstExcelRibbonTab" label="My Custom Tab"&gt;
        &lt;group id="HelpGroup" label="My Group"&gt;
          &lt;button id="PressMeButton" label="Press Me!" 
             imageMso="FastForwardShort" size="large" onAction="OnPressMe" /&gt;
        &lt;/group&gt;
      &lt;/tab&gt;
    &lt;/tabs&gt;
  &lt;/ribbon&gt;
&lt;/customUI&gt;</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>We also have to add the XML file as an embedded resource.&nbsp; To do this go to the file in Solution Explorer, right click and go to properties.&nbsp; Then set the Build Action to <em>‘Embedded Resource’.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>CustomRibbon.cs:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">using System;
using System.IO;
using System.Resources;
using System.Reflection;
using System.Runtime.InteropServices;
using Application = NetOffice.ExcelApi.Application;
using ExcelDna.Integration.CustomUI;

namespace MyExcelAddin
{
    [ComVisible(true)]
    public class CustomRibbon : ExcelRibbon
    {
        private Application _excel;
        private IRibbonUI _thisRibbon;

        public override string GetCustomUI(string ribbonId)
        {
            _excel = new Application(null, ExcelDna.Integration.ExcelDnaUtil.Application);
            string ribbonXml = GetCustomRibbonXML();
            return ribbonXml;
        }

        private string GetCustomRibbonXML()
        {
            string ribbonXml;
            var thisAssembly = typeof(CustomRibbon).Assembly;
            var resourceName = typeof(CustomRibbon).Namespace + ".CustomRibbon.xml";

            using (Stream stream = thisAssembly.GetManifestResourceStream(resourceName))
            using (StreamReader reader = new StreamReader(stream))
            {
                ribbonXml = reader.ReadToEnd();
            }

            if (ribbonXml == null)
            {
                throw new MissingManifestResourceException(resourceName);
            }
            return ribbonXml;
        }

        public void OnLoad(IRibbonUI ribbon)
        {
            if (ribbon == null)
            {
                throw new ArgumentNullException(nameof(ribbon));
            }

            _thisRibbon = ribbon;

            _excel.WorkbookActivateEvent += OnInvalidateRibbon;
            _excel.WorkbookDeactivateEvent += OnInvalidateRibbon;
            _excel.SheetActivateEvent += OnInvalidateRibbon;
            _excel.SheetDeactivateEvent += OnInvalidateRibbon;

            if (_excel.ActiveWorkbook == null)
            {
                _excel.Workbooks.Add();
            }
        }

        private void OnInvalidateRibbon(object obj)
        {
            _thisRibbon.Invalidate();
        }
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>This file has a bit of magic in it, but the method descriptions should be pretty self-explanatory.&nbsp; You are unlikely to need to change the above methods initially.&nbsp; What we <em>will</em> do is to add new methods to handle events raised from COM elements.&nbsp; You might have noticed there is an action on the button defined in the XML file called “OnPressMe” that currently does nothing.&nbsp; So lets make it do something!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First though, let’s take a short side-track and get our new excel add-in working in Excel.</p>
<!-- /wp:paragraph -->

<!-- wp:separator {"opacity":"css"} -->
<hr class="wp-block-separator has-css-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Debugging the add-in from Visual Studio</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To view the ribbon in Excel, we <em>could</em> set this up manually.&nbsp; First build the project, then open Excel and go to File –&gt; Options –&gt; Add-ins –&gt; Manage: Go… –&gt; Browse, and add the dll at MyExcelAddin/bin/Debug/MyExcelAddin-AddIn64.xll.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, during development this loop is pretty slow.&nbsp; We can instead use Visual Studio so that Excel is launched with the add-in automatically attached when clicking Start.&nbsp; You might have been lucky enough that this was automatic (it was for me).&nbsp; But if not go the properties of the project (Alt + Enter from Solution Explorer) and choose ‘Start external program’ from the Debug settings and point to your excel location [on my machine, this was <em>C:\Program Files\Microsoft Office\root\Office16\EXCEL.EXE</em>]. &nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also add 'MyExcelAddin-AddIn.xll' to the Command line arguments.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":57} -->
<figure class="wp-block-image"><img src="https://andysprague.com/wp-content/uploads/2017/02/debugsettings.png" alt="debugsettings" class="wp-image-57" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now click ‘Start’.&nbsp; Excel should load up and have the plugin attached.&nbsp; You will need to click ‘Enable Plugin’ on launch if prompted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You should now see your new ribbon element in Excel!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":58} -->
<figure class="wp-block-image"><img src="https://andysprague.com/wp-content/uploads/2017/02/helloworldexample1.png" alt="helloworldexample1" class="wp-image-58" /></figure>
<!-- /wp:image -->

<!-- wp:separator {"opacity":"css"} -->
<hr class="wp-block-separator has-css-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Doing something useful</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The last step is to hook up the button to perform an action.&nbsp; In the spirit of all beginner tutorials the world over lets get it to write “Hello, World!” to cell A1.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To do this, we need to add an event handler for the action to <em>CustomRibbon.cs</em>.&nbsp; Add the following snippet to the end of the class:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">public void OnPressMe(IRibbonControl control)
{
    using (var controller = new ExcelController(_excel, _thisRibbon))
    {
        controller.PressMe();
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now, let’s add our controller.&nbsp; Add a new class to the project called <em>ExcelController</em>, and copy in the following code:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">using System;
using Application = NetOffice.ExcelApi.Application;
using ExcelDna.Integration.CustomUI;
using NetOffice.ExcelApi;

namespace MyExcelAddin
{
    class ExcelController : IDisposable
    {
        private readonly IRibbonUI _modelingRibbon;
        protected readonly Application _excel;

        public ExcelController(Application excel, IRibbonUI modelingRibbon)
        {
            _modelingRibbon = modelingRibbon;
            _excel = excel;
        }

        public void PressMe()
        {
            var activeSheet = _excel.ActiveSheet as Worksheet;
            activeSheet.Range("A1").Value = "Hello, World!";
        }

        public void Dispose()
        {
        }
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now, restart your application and click the button, voila!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":59} -->
<figure class="wp-block-image"><img src="https://andysprague.com/wp-content/uploads/2017/02/helloworldexample2.png" alt="helloworldexample2" class="wp-image-59" /></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[In this blog I give a tutorial on getting started with Excel-DNA, a project to build excel add-ins using .NET.  By the end you will have a new custom tab in your excel ribbon that contains a button.  I will also show you how to debug this excel plugin by running the project directly from Visual Studio]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date><![CDATA[2017-02-03 19:08:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-02-03 19:08:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-06-05 18:31:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-06-05 18:31:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[my-first-custom-excel-ribbon-using-excel-dna]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="category" nicename="excel-dna"><![CDATA[Excel-DNA]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[Tutorial]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1470418948]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v3-beta:1685989906]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_a08632d93b0dfbb0776903ebc219ef0fe0b56291]]></wp:meta_key>
		<wp:meta_value><![CDATA[
				[contact-field label="Name" type="name"  required="true" /]
				[contact-field label="Email" type="email" required="true" /]
				[contact-field label="Website" type="url" /]
				[contact-field label="Message" type="textarea" /]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_atts_a08632d93b0dfbb0776903ebc219ef0fe0b56291]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:17:{s:2:"to";s:24:"andy.sprague44@gmail.com";s:7:"subject";s:62:"[andysprague.com] My First Custom Excel Ribbon using Excel-DNA";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:14:"block_template";N;s:19:"block_template_part";N;s:2:"id";i:50;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouHeading";s:26:"Your message has been sent";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;s:9:"className";N;s:9:"postToUrl";N;s:14:"salesforceData";N;s:12:"hiddenFields";N;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[sachabarber]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sachabarber@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[151.228.137.162]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-02-05 18:53:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-05 18:53:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice post andy. Well done clear and good topic too]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1429854</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486320796.16409206390380859375;s:5:"event";s:9:"check-ham";s:4:"user";s:11:"sachabarber";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1486323662]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1486323662]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486323662.54681301116943359375;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[andysprague44]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[andy.sprague44@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://spragueyblog.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[82.26.16.43]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-02-06 17:38:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-06 17:38:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Sacha, appreciated]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>1</wp:comment_parent>
			<wp:comment_user_id>61767449</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1486402712]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486402712.3625929355621337890625;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1486402712]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Excel-DNA Custom Ribbon Cheat Sheet – Andy Sprague]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://andysprague.com/2017/04/25/excel-dna-custom-ribbon-cheat-sheet/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.0.101.25]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-04-25 00:46:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-04-25 00:46:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] I will assume you have already got a project that creates a custom ribbon, and you now want my amazing insight on how to add something that is more elaborate than, say, a button that writes a hard-coded string to cell A1 of the current worksheet .  If this isn&#8217;t true head over to my previous blog: My First Custom Excel Ribbon using Excel-DNA. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1493086504]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493084949.7934210300445556640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493086504.762093067169189453125;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493081210.4960820674896240234375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Show Message Boxes with Excel-DNA &#8211; Andy Sprague]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://andysprague.com/2017/07/03/show-message-boxes-with-excel-dna/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.0.91.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-07-03 18:12:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-07-03 18:12:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] The below assumes a simple Excel-DNA project has been created as per my tutorial at: https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1499114209]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1499109888.05222606658935546875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1499114209.6104800701141357421875;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1499105575.51675891876220703125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[NetOffice.Excel &#8211; Add Validation to a Cell &#8211; Andy Sprague]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://andysprague.com/2017/11/30/netoffice-excel-add-validation-to-a-cell/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.0.101.177]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-30 06:29:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-30 06:29:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1512023393.8585479259490966796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1512024581]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1512024581.597115039825439453125;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>90</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[js49994@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[91.125.65.224]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-08-17 11:23:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-08-17 11:23:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This was very helpful in getting started, thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1534509822.528073;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1534505011.443725;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1534554667]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1534554667]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1534554667.636473;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[comment_like_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>16113</wp:comment_id>
			<wp:comment_author><![CDATA[My First Custom Excel-DNA Add-In (dotnet6 edition) &#8211; Andy Sprague]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://andysprague.com/2023/03/14/my-first-custom-excel-dna-add-in-dotnet6-edition/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.0.112.141]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2023-03-14 05:50:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2023-03-14 05:50:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] is an upgrade to my earlier blog &#8220;My First Custom Excel Ribbon using Excel-DNA&#8220;, now written for dotnet [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1678773048.680168;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1678774076]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1678774077.006296;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>16169</wp:comment_id>
			<wp:comment_author><![CDATA[Mercurial]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mercurialm00n@protonmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.119.208.254]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2023-06-30 07:37:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2023-06-30 07:37:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi not sure why the dependency of NetOffice was needed for the ribbon? I think ExcelDna does this without any external dependencies.
I guess it didn't do it when you first wrote the post. 
Correct me if i'm wrong.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1688110646.632678;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1688131611]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1688115561.778199;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1688131451]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1688131452.473594;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1688131607.472355;s:5:"event";s:17:"status-unapproved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1688131612.052172;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>16170</wp:comment_id>
			<wp:comment_author><![CDATA[andysprague44]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[andy.sprague44@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://andysprague.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[135.180.181.41]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2023-06-30 13:28:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2023-06-30 13:28:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You are correct - however the 2 libraries work well together to give you enough control to get what you need done, as I’m assuming the ribbon is a starting place to customize excel and not the full solution.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>16169</wp:comment_parent>
			<wp:comment_user_id>61767449</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1688131693]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1688131693.760381;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1688131695]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>16171</wp:comment_id>
			<wp:comment_author><![CDATA[andysprague44]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[andy.sprague44@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://andysprague.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[135.180.181.41]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2023-06-30 13:31:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2023-06-30 13:31:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also check out https://andysprague.com/2023/03/14/my-first-custom-excel-dna-add-in-dotnet6-edition/ if you haven’t already!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>16169</wp:comment_parent>
			<wp:comment_user_id>61767449</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1688131870]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1688131871.20675;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1688131872]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Excel-DNA Custom Ribbon Cheat Sheet]]></title>
		<link>https://andysprague.com/2017/04/25/excel-dna-custom-ribbon-cheat-sheet/</link>
		<pubDate>Tue, 25 Apr 2017 00:46:43 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">http://andysprague.com/?p=65</guid>
		<description></description>
		<content:encoded><![CDATA[In this blog I'll give some helpful snippets of code to work with Custom Ribbons in Excel-DNA.

I will assume you have already got a project that creates a custom ribbon, and you now want my amazing insight on how to add something that is more elaborate than, say, a button that writes a hard-coded string to cell A1 of the current worksheet .  If this isn't true head over to my previous blog: <a href="http://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/">My First Custom Excel Ribbon using Excel-DNA</a>.

This is a companion to the main documentation which you can find <a href="https://exceldna.codeplex.com/documentation">here</a>.  This goes into a bit more detail on some of the below snippets.

<em><strong>A quick side-note:</strong> </em>

If you are looking for a cheat-sheet for how to interact with Excel itself i.e. read and write to cells, you actual want information on <em>NetOffice.Excel</em>.  This blog is focused on the Excel-DNA features only.  I'll be writing a part 2 blog on <em>NetOffice.Excel</em> specific stuff in future but for now, well, search Google.  I mention this as the distinction confused me when I first started working in this space!

Now on with the blog...
<h1>Auto-Completion of the customui xml</h1>
The first one is a biggy:  auto-completion of xml elements in the ribbon definition.  Once you have this you can see all available options in the current scope as a drop-down.  Neato!

<img class="alignnone size-full wp-image-125" src="https://andysprague.com/wp-content/uploads/2017/04/xmlautocomplete1.png" alt="XmlAutoComplete" width="1418" height="410" />

In theory it should be as simple as adding a customUI element to the xml definition that loads the schema, but that didn't work for me (comment if you have worked it out, would be really appreciated and I'll update).  By all means try yourself though:
<pre>[sourcecode language="xml" padlinenumbers="true"]
&amp;lt;?xml version="1.0" encoding="utf-8" ?/&amp;gt;
&amp;lt;customUI xmlns="http://schemas.microsoft.com/office/2006/01/customui" onLoad="OnLoad"/&amp;gt;
&amp;lt;!--Your ribbon definiton--/&amp;gt;
&amp;lt;/customUI&amp;gt;
[/sourcecode]</pre>
Otherwise the following steps will do the trick:
<ol>
 	<li>Download the customUi.xsd schema from the Excel-DNA project
<ul>
 	<li><em><a href="https://raw.githubusercontent.com/Excel-DNA/ExcelDna/master/Distribution/XmlSchemas/customUI.xsd">https://raw.githubusercontent.com/Excel-DNA/ExcelDna/master/Distribution/XmlSchemas/customUI.xsd</a></em></li>
 	<li>Tested on Office 2010 and Office 365 (version 2106); might work for older versions but you are on your own.</li>
</ul>
</li>
 	<li>Open the xml file in Visual Studios, right click anywhere in the window, and choose Properties from the menu</li>
 	<li>In the 'schemas' field, click the elipsis (…) on the right, and add the schema 'customUi.xsd' from the save location of step 1</li>
</ol>
<img class="alignnone size-full wp-image-120" src="https://andysprague.com/wp-content/uploads/2017/04/addcustomuischema.png" alt="AddCustomUISchema" width="1425" height="769" />

Now it's just up to you to get experimenting.
<h1>Write Back To Excel From a Background Thread</h1>
As soon as you release control from your application and have some background thread doing long running tasks so that the user can interact with Excel in the meantime, the below is vital.

It's not a helpful error message but you may get something like the below when editing a cell at the same time as the completion of your background task:

<span style="color:#ff0000;">'An exception of type 'System.Runtime.InteropServices.COMException' occurred in NetOffice.dll but was not handled in user code'</span>

With Excel-DNA this is luckily a super simple fix.
<pre>Task.Factory.StartNew( () =&gt; DoSomeWork() ) 
    .ContinueWith(t =&gt; WriteSomethingToExcel());</pre>
becomes
<pre>Task.Factory.StartNew( () =&gt; DoSomeWork() ) 
    .ContinueWith(t =&gt; 
        ExcelAsyncUtil.QueueAsMacro(() =&gt; WriteSomethingToExcel()));</pre>
As soon as the user frees up Excel (i.e. stops editing a cell) then and only then is 'WriteSomethingToExcel' performed.
<h1>ImageMso Gallery</h1>
When adding options to your menu, you'll need icons.  There are about 9,000 already available icons (yikes!), so you'll probably find one that is suitable and is consistent with the UX of Excel.  you can also add custom icons.
<h2>Built-in icons</h2>
You can add a built-in icon to your custom ribbon using the <em>imageMso</em> argument.  For example:
<pre>[sourcecode language="xml" padlinenumbers="true"]
&amp;lt;button id="refreshButton" imageMso="RefreshMenu" size="large" onAction="onRefreshMenu" /&amp;gt;
[/sourcecode]</pre>
How can you see the available icons?  The best way is a great excel add-in that allows you to browse the full icon gallery.  Install from https://imagemso.codeplex.com/releases/view/116271 - instructions on how to access are in the documentation tab of the same website.  The result?

<img class="alignnone size-full wp-image-156" src="https://andysprague.com/wp-content/uploads/2017/04/imagemsogallery.png" alt="imageMsoGallery" width="1357" height="903" />

Alternatively there is an online gallery at http://www.spreadsheet1.com/office-excel-ribbon-imagemso-icons-gallery-page-01.html - however, this seems like a subset of the available icons only, and there is no search function.
<h2>Custom Icons</h2>
You can also add custom icons using the <em>getImage</em> argument in the CustomRibbon.xml definition.  A walkthrough of this is at https://andysprague.com/2017/07/03/custom-icons-in-excel-dna-custom-ribbon/

CustomRibbon.xml:
<pre>[sourcecode language="xml" padlinenumbers="true"]
&amp;lt;button id="CustomImageButton" label="Custom Image" getImage="GetImage" size="large" onAction="OnPressMe"/&amp;gt;
[/sourcecode]</pre>
CustomRibbon.cs:
<pre>[sourcecode language="csharp"]
public Bitmap GetImage(IRibbonControl control)
 {
 switch (control.Id)
   {
     case "CustomImage": return new Bitmap(Properties.Resources.CustomImage);
     default: return null;
   }
 }
[/sourcecode]</pre>
<h1>Message Boxes</h1>
Show a pop-up message box and get user inputs.
<pre>[sourcecode language="csharp"]&amp;lt;/pre&amp;gt;
public DialogResult MessageBox(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon)
{
return ShowModal(parentWindow =&amp;gt; MsgBox.Show(parentWindow, text, caption, buttons, icon));
}

private static DialogResult ShowModal(Func&amp;lt;IWin32Window, DialogResult&amp;gt; dialogFunc)
{
var parentWindow = new NativeWindow();
parentWindow.AssignHandle(ExcelDna.Integration.ExcelDnaUtil.WindowHandle);

try
{
return dialogFunc(parentWindow);
}
finally
{
parentWindow.ReleaseHandle();
}
}
&amp;lt;pre&amp;gt;[/sourcecode]</pre>
More details, including how to handle this in background threads, at https://andysprague.com/2017/07/03/show-message-boxes-with-excel-dna/
<h1>Dynamic Menus</h1>
See <a href="http://stackoverflow.com/a/34033472">http://stackoverflow.com/a/34033472</a>, at some point I'll do a blog with more details on this one but I'll basically be copying that answer anyhow.  Credit to the original poster Caio will obviously be given ;)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2017-04-25 00:46:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-04-25 00:46:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-07-22 08:57:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-07-22 08:57:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[excel-dna-custom-ribbon-cheat-sheet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="custom-ribbon"><![CDATA[Custom Ribbon]]></category>
		<category domain="category" nicename="excel-dna"><![CDATA[Excel-DNA]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[4357357452]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[125]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v3-beta:1673685239]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Show Message Boxes with Excel-DNA]]></title>
		<link>https://andysprague.com/2017/07/03/show-message-boxes-with-excel-dna/</link>
		<pubDate>Mon, 03 Jul 2017 18:12:48 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andyspraguedotcom.wordpress.com/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Often a simple way to get user feedback is to show a pop-up message box.&nbsp; Read on for a tutorial on how to do this.&nbsp; As an example, this is the result we will get from this blog:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="http://andysprague.com/wp-content/uploads/2017/07/image.png"><img src="http://andysprague.com/wp-content/uploads/2017/07/image_thumb.png" alt="SimpleMessageBox" title="SimpleMessageBox" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The second section of this blog deals with how to handle message boxes during asynchronous operations, as this is a little more involved.  All code examples can be found at: <a href="https://github.com/andysprague44/excel-dna-examples/tree/master/MessageBox">https://github.com/andysprague44/excel-dna-examples/tree/master/MessageBox</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The below assumes a simple Excel-DNA project has been created as per my tutorial at: <a title="https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/" href="https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/">https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Simple Message Box</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To achieve this in your Excel-DNA project there are several steps.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>1. Add a class that displays the message box:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">﻿using System;
using System.Windows.Forms;
using MsgBox = System.Windows.Forms.MessageBox;

public interface IExcelWinFormsUtil
{
    DialogResult ShowForm(Form form);
    DialogResult MessageBox(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon);
}


public class ExcelWinFormsUtil : IExcelWinFormsUtil
{
    public DialogResult ShowForm(Form form)
    {
        return ShowModal(form.ShowDialog);
    }

    public DialogResult MessageBox(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon)
    {
        return ShowModal(parentWindow =&gt; MsgBox.Show(parentWindow, text, caption, buttons, icon));
    }

    private static DialogResult ShowModal(Func&lt;IWin32Window, DialogResult&gt; dialogFunc)
    {
        var parentWindow = new NativeWindow()
        parentWindow.AssignHandle(ExcelDna.Integration.ExcelDnaUtil.WindowHandle);
      
        try
        {
            return dialogFunc(parentWindow);
        }
        finally
        {
            parentWindow.ReleaseHandle();
        }
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>The critical line is <code>parentWindow.AssignHandle(ExcelDna.Integration.ExcelDnaUtil.WindowHandle);</code>.  Here we use Excel-DNA to get a reference to the Excel window, and then use this to display a message box within the context of excel (as a child window).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2. Next is to create an instance of this class when the add-in loads.&nbsp; In the CustomRibbon.cs class:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">public override string GetCustomUI(string ribbonId)
{
    _excel = new Application(null, ExcelDna.Integration.ExcelDnaUtil.Application);
    _excelWinFormsUtil = new ExcelWinFormsUtil();

    string ribbonXml = GetCustomRibbonXML();
    return ribbonXml;
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>And to make the form visible to the controller any action that requires message boxes can be run like this:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">public void OnPressMe(IRibbonControl control)
{
    using (var controller = new ExcelController(_excel, _thisRibbon, _excelWinFormsUtil))
    {
        controller.PressMe();
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>3. The last thing to do is to call it!&nbsp; The below is called from the ExcelController.cs class but could be anywhere in your code-base:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">public void PressMe()
{
    var dialogResult = _excelWinFormsUtil.MessageBox(
        "This is a message box asking for your input - write something?",
        "Choose Option",
        MessageBoxButtons.YesNoCancel,
        MessageBoxIcon.Question);

    switch (dialogResult)
    {
        case DialogResult.Yes:
          _excel.Range("A1").Value = "Yes chosen";
          break;
        case DialogResult.Cancel:
          _excel.Range("A1").Value = "Canceled";
          break;
        case DialogResult.No:
          _excel.Range("A1").Value = null;
          break;
    }
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>MessageBoxButtons contains the standard options, YesNo, OkCancel etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are some changes to how excel itself handles windows from versions 2013 onwards but I have tested before and after so should work in most Excel versions (though no guarantees).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Asynchronous Message Boxes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When calling message boxes from background threads things get a little tricky.&nbsp; Excel is at heart a single threaded application, so any Excel COM interaction has to be <em>passed back to the main thread.&nbsp; </em>You’ll know when you’ve hit this problem if the focus returns to the wrong workbook after a message box is displayed, or there may be just a cryptic COM exception.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Excel-DNA provides help with this, which is to use the function <em>ExcelAsyncUtil.QueueAsMacro</em>.&nbsp; This waits for the main thread to be free then runs the code that interacts with Excel, i.e if the user is editing a cell at the time the function is called, it will wait until editing is finished, and then and only then call the code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, if we want to show a message box in this workflow we often want to wait for user feedback i.e. YesNo, OkCancel.&nbsp; the default method <em>does not block execution</em> so any code that uses a returned DialogResult will always use <em>DialogResult.None.</em>&nbsp; This means we need to do some more work with the provided function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’ve implemented as an extension method that does this, add the following class to your application:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">using System;
using System.Threading.Tasks;
using Application = NetOffice.ExcelApi.Application;
using ExcelDna.Integration;

namespace MessageBoxAddin.Extensions
{
    public static class ExcelDnaExtensions
    {
        /// &lt;summary&gt;
        /// Run a function using ExcelAsyncUtil.QueueAsMacro and allow waiting for the result.
        /// Waits until excel resources are free, runs the func, then waits for the func to complete.
        /// &lt;/summary&gt;
        /// &lt;example&gt;
        /// var dialogResult = await excel.QueueAsMacroAsync(e =&gt;
        ///     _excelWinFormsUtil.MessageBox("Message", "Caption", MessageBoxButtons.YesNo, MessageBoxIcon.Question) );
        /// &lt;/example&gt;
        public static async Task&lt;T&gt; QueueAsMacroAsync&lt;T&gt;(this Application excel, Func&lt;Application, T&gt; func)
        {
            try
            {
                var tcs = new TaskCompletionSource&lt;T&gt;();
                ExcelAsyncUtil.QueueAsMacro((x) =&gt;
                {
                    var tcsState = (TaskCompletionSource&lt;T&gt;)((object[])x)[0];
                    var f = (Func&lt;Application, T&gt;)((object[])x)[1];
                    var xl = (Application)((object[])x)[2];
                    try
                    {
                        var result = f(xl);
                        tcsState.SetResult(result);
                    }
                    catch (Exception ex)
                    {
                        tcsState.SetException(ex);
                    }
                }, new object[] { tcs, func, excel });
                var t = await tcs.Task;
                return t;
            }
            catch (AggregateException aex)
            {
                var flattened = aex.Flatten();
                throw new Exception(flattened.Message, flattened);
            }
        }
    }
}
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Then to call, include the extensions class in your imports:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">using static MessageBoxAddin.Extensions.ExcelDnaExtensions;</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>and call as in this example:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">public void OnPressMeBackgroundThread(int delay)
        {
            Task.Factory.StartNew(
                () =&gt; RunBackgroundThread(delay),
                CancellationToken.None,
                TaskCreationOptions.LongRunning,
                TaskScheduler.Current
            );
        }
        public async Task RunBackgroundThread(int delay)
        {
            Thread.Sleep(delay*1000);
            
            //get user input as part of a background thread
            var dialogResult = await _excel.QueueAsMacroAsync(xl =&gt;
                _excelWinFormsUtil.MessageBox(
                    "Message box called from background thread",
                    "Long Running Thread",
                    MessageBoxButtons.OKCancel,
                    MessageBoxIcon.Information)
            );

            //do stuff depending on dialog result in the background

            //finally, call back to excel to write some result
            ExcelAsyncUtil.QueueAsMacro(() =&gt;
            {
                _excel.Range("A1").Value = dialogResult.ToString();
            });
        }</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>So what are we doing here?&nbsp; By using a TaskCompletionSource we can force completion of the function before continuing using ‘await tcs.Task’.&nbsp;&nbsp; This is turn means we can await the QueueAsMacroAsync function and do something with the MessageBox result.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="http://andysprague.com/wp-content/uploads/2017/07/image1.png"><img src="http://andysprague.com/wp-content/uploads/2017/07/image_thumb1.png" alt="AsyncMessageBox" title="AsyncMessageBox" /></a></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2017-07-03 18:12:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-03 18:12:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-06-05 18:42:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-06-05 18:42:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[show-message-boxes-with-excel-dna]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="custom-ribbon"><![CDATA[Custom Ribbon]]></category>
		<category domain="category" nicename="excel-dna"><![CDATA[Excel-DNA]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[6733460803]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[162]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[u:wpcom-ufa-v3-beta:1685990566]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Excel-DNA Custom Ribbon Cheat Sheet &#8211; Andy Sprague]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://andysprague.com/2017/04/25/excel-dna-custom-ribbon-cheat-sheet/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.0.117.226]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-07-03 22:25:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-07-03 22:25:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] More details, including how to handle this in background threads, at https://andysprague.com/2017/07/03/show-message-boxes-with-excel-dna/ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1499120754.9864909648895263671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1499121936]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1499121936.655230998992919921875;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Custom Icons in Excel-DNA Custom Ribbon]]></title>
		<link>https://andysprague.com/2017/07/03/custom-icons-in-excel-dna-custom-ribbon/</link>
		<pubDate>Mon, 03 Jul 2017 22:15:56 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andyspraguedotcom.wordpress.com/?p=175</guid>
		<description></description>
		<content:encoded><![CDATA[When adding options to your menu, you'll need icons.  There are about 9,000 already available icons (yikes!), so you'll probably find one that is suitable and is consistent with the UX of Excel.  You can also add custom icons.  As always code is available on my bit bucket account: <a title="https://bitbucket.org/andysprague44/excel-dna-examples/...CustomImage" href="https://bitbucket.org/andysprague44/excel-dna-examples/src/5bfd0b5806d095eb979ae46cec0e78913f12c14d/CustomImage/?at=master">https://bitbucket.org/andysprague44/excel-dna-examples/...CustomImage</a>
<h2>Built-in icons</h2>
You can add a built-in icon to your custom ribbon using the <em>imageMso</em> argument.  For example:
<div id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:249e6488-30f6-4992-8bf1-18c2ff321090" class="wlWriterEditableSmartContent" style="float:none;margin:0;display:inline;padding:0;">

[sourcecode language="xml"]
&lt;button id=&quot;refreshButton&quot; imageMso=&quot;RefreshMenu&quot; size=&quot;large&quot; onAction=&quot;onRefreshMenu&quot; /&gt;
[/sourcecode]

</div>
How can you see the available icons?  The best way is a great excel add-in that allows you to browse the full icon gallery.  Install from <a href="https://imagemso.codeplex.com/releases/view/116271">https://imagemso.codeplex.com/releases/view/116271</a>  - instructions on how to access are in the documentation tab of the same website.  The result?

<img src="https://andysprague.com/wp-content/uploads/2017/04/imagemsogallery.png" alt="imageMsoGallery" width="1357" height="903" />

Alternatively there is an online gallery at <a href="http://www.spreadsheet1.com/office-excel-ribbon-imagemso-icons-gallery-page-01.html">http://www.spreadsheet1.com/office-excel-ribbon-imagemso-icons-gallery-page-01.html</a> - however, this seems like a subset of the available icons only, and there is no search function.
<h2>Custom Icons</h2>
You can also add custom icons using the <em>getImage</em> argument.  For this you need to
<ol>
	<li style="list-style-type:none;">
<ol>
	<li>Add an image to your resources</li>
	<li>Add a <em>getImage</em> argument to the element in the customRibbon.xml file</li>
	<li>Add an action handler to serve up your image.<!--EndFragment--></li>
</ol>
</li>
</ol>
The action is invoked when you first load up the ribbon and the image will appear.

Note that any image is allowed but excel displays small PNG icons style images best – I use <a title="http://www.flaticon.com/" href="http://www.flaticon.com/">http://www.flaticon.com/</a> to get free icons.  A favourite summer holiday snap is not going to render very well.
<h3>Add an image to resources</h3>
Start by adding the image to a folder called Resources in the project.  Then to add the image to the strongly typed resources of the project itself, go to project properties (right click on project in the project Explorer -&gt; Properties), then choose Resources.  Add your resource from the top menu using ‘Add Existing File’.

<img src="https://andysprague.com/wp-content/uploads/2017/04/addresource.jpg" alt="AddResource" width="1257" height="480" />

Then, right click on the Resources.resx file and choose ‘Run Custom Tool’ to generate a strongly typed reference <em>Properties.Resources.rugbyimage</em> that we can call in our action handler later on.

<a href="http://andysprague.com/wp-content/uploads/2017/07/image2.png"><img style="background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border:0;" title="image" src="http://andysprague.com/wp-content/uploads/2017/07/image_thumb2.png" alt="image" width="1109" height="626" border="0" /></a>

&nbsp;
<h3>Add custom xml element</h3>
Add to CustomRibbon.xml:
<div id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:b338fc4c-be58-45fa-80be-13759f3a96f4" class="wlWriterEditableSmartContent" style="float:none;margin:0;display:inline;padding:0;">

[sourcecode language="xml"]
&lt;button id=&quot;RugbyImageButton&quot; label=&quot;Rugby&quot; getImage=&quot;GetImage&quot; size=&quot;large&quot; onAction=&quot;OnPressMe&quot;/&gt;
[/sourcecode]

</div>
Note that the option is ‘getImage’ as opposed to using ‘imageMso’ when using built in images.
<h3>Add action handler</h3>
Then you need to add an action handler to serve up your image:

CustomRibbon.cs:
<div id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:c3d272e1-4e41-4b9b-9469-90262f165466" class="wlWriterEditableSmartContent" style="float:none;margin:0;display:inline;padding:0;">

[sourcecode language="csharp"]
public Bitmap GetImage(IRibbonControl control)
        {
            switch (control.Id)
            {
                case &quot;RugbyImageButton&quot;: return new Bitmap(CustomImage.Properties.Resources.RugbyImage);
                default: return null;
            }
        }
[/sourcecode]

</div>
Using the switch on the ID of the element allows us to easily add multiple images in the future using the same action handler.

This is the final result!

<a href="http://andysprague.com/wp-content/uploads/2017/07/image3.png"><img style="background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border:0;" title="image" src="http://andysprague.com/wp-content/uploads/2017/07/image_thumb3.png" alt="image" width="767" height="548" border="0" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date><![CDATA[2017-07-03 22:15:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-03 22:15:56]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-07-03 22:28:23]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-07-03 22:28:23]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[custom-icons-in-excel-dna-custom-ribbon]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="custom-ribbon"><![CDATA[Custom Ribbon]]></category>
		<category domain="category" nicename="excel-dna"><![CDATA[Excel-DNA]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[Tutorial]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[6739238790]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[174]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v3-beta:1681461306]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>14836</wp:comment_id>
			<wp:comment_author><![CDATA[Luchito]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[luchito69@luchiux.onf]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[179.6.194.75]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-14 02:52:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-14 02:52:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Muchas gracias amigo!!!  :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1600696459.088631;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1600696461.02757;s:5:"event";s:17:"status-unapproved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1600051931.977941;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1600056744.519238;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1604726884.204431;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1604726883]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1600696458]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[NetOffice.Excel - Add Validation to a Cell]]></title>
		<link>https://andysprague.com/2017/11/30/netoffice-excel-add-validation-to-a-cell/</link>
		<pubDate>Thu, 30 Nov 2017 06:29:45 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andyspraguedotcom.wordpress.com/?p=191</guid>
		<description></description>
		<content:encoded><![CDATA[My most recent blogs have been focused on Excel-DNA, and the pretty cool ability it brings to easily add your own custom ribbons.  This blog is looking at the other component of writing a C# app that can talk to Excel – namely NetOffice.Excel.

NetOffice.Excel provides the ability to interact with Excel COM elements, in a (mostly) painless way.  Think workbooks, worksheets, ranges, cells, read, write, format, copy… and pretty much all else you are able to do through Excel.

This blog will focus on the ability to create validation within a cell.  From excel, you can find that option here:
<h2><a href="http://andysprague.com/wp-content/uploads/2017/11/image.png"><img style="background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;" title="image" src="http://andysprague.com/wp-content/uploads/2017/11/image_thumb.png" alt="image" width="1300" height="290" border="0" /></a></h2>
<h2>Code</h2>
As always, feel free to dive straight into the code and take snippets at will.  you can find the full project at:

<a title="https://bitbucket.org/andysprague44/netoffice.excel.extensions" href="https://bitbucket.org/andysprague44/netoffice.excel.extensions">https://bitbucket.org/andysprague44/netoffice.excel.extensions</a>

And the code for this blog:

<a title="https://bitbucket.org/andysprague44/netoffice.excel.extensions/src/91d59b64a54fc0342064f5a529bf6f65685466da/NetOffice.Excel.Extensions/Extensions/CellValidationExtensions.cs?at=master&amp;fileviewer=file-view-default" href="https://bitbucket.org/andysprague44/netoffice.excel.extensions/src/91d59b64a54fc0342064f5a529bf6f65685466da/NetOffice.Excel.Extensions/Extensions/CellValidationExtensions.cs?at=master&amp;fileviewer=file-view-default">https://bitbucket.org/andysprague44/netoffice.excel.extensions/src/91d59b64a54fc0342064f5a529bf6f65685466da/NetOffice.Excel.Extensions/Extensions/CellValidationExtensions.cs?at=master&amp;fileviewer=file-view-default</a>
<h2></h2>
<h2></h2>
<h2>Getting set-up</h2>
In order to test out our application, I’d suggest getting immediately familiar with Excel-DNA, as this gives us a way to launch Excel from Visual Studio direct and gives us a way to see interactively what is going on.  Otherwise we’d be updating a closed excel worksheet, and you’d have to launch it after manually to see the impact.  And hey, nobody likes anything manual.  Follow this tutorial to get set-up with a Hello World application that we can use to test.

<a title="https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/" href="https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/">https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/</a>

If you already have an application that uses NetOffice.Excel but not Excel-DNA, then the code should still be relevant, you’ll just be on your own testing it out.
<h2>Adding validation with a hard-coded list</h2>
If you are on this blog and know this one, but you’re getting errors with long lists, don’t panic, skip to the next section.

So essentially we are replicating:

<a href="http://andysprague.com/wp-content/uploads/2017/11/image1.png"><img style="background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;" title="image" src="http://andysprague.com/wp-content/uploads/2017/11/image_thumb1.png" alt="image" width="1044" height="558" border="0" /></a>

Add this extension method to your project:
<div id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:8cbc2d80-ef9d-47ff-a583-5c3836b3ccbc" class="wlWriterEditableSmartContent" style="float:none;margin:0;display:inline;padding:0;">
<pre>[sourcecode language="csharp" padlinenumbers="true"]
using System;
using System.Collections.Generic;
using System.Linq;
using NetOffice.ExcelApi;
using NetOffice.ExcelApi.Enums;

namespace NetOffice.Excel.Extensions.Extensions
{
public static class CellValidationExtensions
{
public static void AddCellListValidation(this Range cell, IList&amp;lt;string&amp;gt; allowedValues, string initialValue = null)
{
var flatList = allowedValues.Aggregate((x, y) =&amp;gt; $"{x},{y}");
if (flatList.Length &amp;gt; 255)
{
throw new ArgumentException("Combined number of chars in the list of allowedValues can't exceed 255 characters");
}
cell.AddCellListValidation(flatList, initialValue);
}

private static void AddCellListValidation(this Range cell, string formula, string initialValue = null)
{
cell.Validation.Delete();
cell.Validation.Add(
XlDVType.xlValidateList,
XlDVAlertStyle.xlValidAlertInformation,
XlFormatConditionOperator.xlBetween,
formula,
Type.Missing);
cell.Validation.IgnoreBlank = true;
cell.Validation.InCellDropdown = true;
if (initialValue != null)
{
cell.Value = initialValue;
}
}
}
}
[/sourcecode]</pre>
</div>
Hopefully this should be easy enough to follow.  First, we aggregate the list to a comma separated string (which is the ‘Source’ or ‘formula’), then we call the cell.Validation method with some ugly excel settings rearing up.  More description of these in the documentation at

<a title="https://msdn.microsoft.com/en-us/library/microsoft.office.interop.excel.validation.add(v=office.15).aspx?cs-save-lang=1&amp;cs-lang=csharp#code-snippet-1" href="https://msdn.microsoft.com/en-us/library/microsoft.office.interop.excel.validation.add(v=office.15).aspx?cs-save-lang=1&amp;cs-lang=csharp#code-snippet-1">https://msdn.microsoft.com/en-us/library/microsoft.office.interop.excel.validation.add(v=office.15).aspx?cs-save-lang=1&amp;cs-lang=csharp#code-snippet-1</a>

Then to test it:

1. Add a button in the custom ribbon to add cell validation (COMING SOON – right clicking on the cell can also provide this functionality)
<div id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:06c0e3cf-f1d2-495b-b2a6-c8ebeef465df" class="wlWriterEditableSmartContent" style="float:none;margin:0;display:inline;padding:0;">
<pre>[sourcecode language="xml"]
&amp;lt;group id="Group1" label="My Group"&amp;gt;
&amp;lt;button id="Add Validation" label="Validate!" imageMso="FastForwardShort" size="large" onAction="OnAddValidation"&amp;gt;
&amp;lt;/group&amp;gt;
[/sourcecode]</pre>
</div>
2. Add this code to customRibbon.cs:
<div id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:da96ed66-cde0-4963-8af8-74d810a17e42" class="wlWriterEditableSmartContent" style="float:none;margin:0;display:inline;padding:0;">
<pre>[sourcecode language="csharp"]
using static MyExcelAddin.CellValidationExtensions;
...

public void OnAddValidation(IRibbonControl control)
{
var allowedValues = new List&amp;lt;string&amp;gt; { "England", "30", "6", "Australia", "Equals", "Thrashing" };
((Worksheet)_excel.ActiveSheet).Range("A1").AddCellListValidation(allowedValues);
}
[/sourcecode]</pre>
</div>
Launch excel and Click the new button, and you should now see the cell validation in cell A1:

<a href="http://andysprague.com/wp-content/uploads/2017/11/image2.png"><img style="background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;" title="image" src="http://andysprague.com/wp-content/uploads/2017/11/image_thumb2.png" alt="image" width="1050" height="444" border="0" /></a>

To change the error message displayed when invalid data is entered use:
<div id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:ded5ad4a-3ea6-431b-acc2-88b6fefd30f4" class="wlWriterEditableSmartContent" style="float:none;margin:0;display:inline;padding:0;">
<pre>[sourcecode language="csharp"]
cell.Validation.ErrorMessage = "No Chance";
[/sourcecode]</pre>
</div>
So we then get:

<a href="http://andysprague.com/wp-content/uploads/2017/11/image3.png"><img style="background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;" title="image" src="http://andysprague.com/wp-content/uploads/2017/11/image_thumb3.png" alt="image" width="1038" height="422" border="0" /></a>
<h2></h2>
<h2>Cell Validation for long list</h2>
This method breaks down for long lists, are there is a limit of (I think) 255 chars for this length of the comma seperated list.  In this case all we can do is save the values to a range, and reference that to provide our cell validation.

Add this method to your CellValidationExtensions class:
<div id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:e3af35dd-3a26-4e74-894b-92cf58cc31ff" class="wlWriterEditableSmartContent" style="float:none;margin:0;display:inline;padding:0;">
<pre>[sourcecode language="csharp"]
public static void AddCellListValidation(this Range cell, Range allowedValuesRange, string initialValue = null)
{
var fullAddress = $"='{allowedValuesRange.Worksheet.Name}'!{allowedValuesRange.Address}";
cell.AddCellListValidation(fullAddress, initialValue);
}
[/sourcecode]</pre>
</div>
The difference here is that the formula/source is now referencing a range, rather than a hard-coded string.  Simples!

To test, change the method in CustomRibbon.cs to the following:
<div id="scid:C89E2BDB-ADD3-4f7a-9810-1B7EACF446C1:b08c6a6e-cfda-432a-9f7d-fa851339de62" class="wlWriterEditableSmartContent" style="float:none;margin:0;display:inline;padding:0;">
<pre>[sourcecode language="csharp"]
public void OnAddValidation(IRibbonControl control)
{
var allowedValues = new List&amp;lt;string&amp;gt; { "England", "30", "6", "Australia", "Equals", "Thrashing" };
var activeSheet = ((Worksheet)_excel.ActiveSheet);
var range = activeSheet.Range("A1:F1");
range.Value = allowedValues.ToArray();
activeSheet.Range("A2").AddCellListValidation(range);
}
[/sourcecode]</pre>
</div>
First, save the list to a range, then use this range to populate the validation.   In a real application you would probably want to create a hidden sheet, and save the allowed value list there, it works the same.

The result is this:

<a href="http://andysprague.com/wp-content/uploads/2017/11/image4.png"><img style="background-image:none;padding-top:0;padding-left:0;display:inline;padding-right:0;border-width:0;" title="image" src="http://andysprague.com/wp-content/uploads/2017/11/image_thumb4.png" alt="image" width="669" height="453" border="0" /></a>

Now you know how to use NetOffice.Excel to add cell validation!   I’m always open to feedback, please comment what you think below.

Until next time.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date><![CDATA[2017-11-30 06:29:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-30 06:29:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-01-26 17:28:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-01-26 17:28:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[netoffice-excel-add-validation-to-a-cell]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="cellvalidation"><![CDATA[CellValidation]]></category>
		<category domain="post_tag" nicename="excel"><![CDATA[Excel]]></category>
		<category domain="category" nicename="excel-dna"><![CDATA[Excel-DNA]]></category>
		<category domain="category" nicename="netoffice"><![CDATA[NetOffice]]></category>
		<category domain="category" nicename="netoffice-excel"><![CDATA[NetOffice.Excel]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[Tutorial]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[11986590602]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_atts_6c040f6a54d08b15498e9bfb7b96b14497ae1c45]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:10:{s:2:"to";s:24:"andy.sprague44@gmail.com";s:7:"subject";s:57:"[Andy Sprague] NetOffice.Excel - Add Validation to a Cell";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:2:"id";i:191;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_6c040f6a54d08b15498e9bfb7b96b14497ae1c45]]></wp:meta_key>
		<wp:meta_value><![CDATA[[contact-field label="Name" type="name" required="1"/][contact-field label="Email" type="email" required="1"/][contact-field label="Website" type="url"/][contact-field label="Comment" type="textarea" required="1"/]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v3-beta:1671525361]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Flask Blueprint for Microsoft Azure AAD Authentication]]></title>
		<link>https://andysprague.com/2020/11/11/flask-blueprint-for-microsoft-azure-aad-authentication-oauth-2-0/</link>
		<pubDate>Wed, 11 Nov 2020 00:29:34 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">http://andysprague.com/?p=260</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This blog post takes you through adding authentication to a Flask application, using a blueprint, connecting to <span style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)">Microsoft Azure AAD using <a href="https://pypi.org/project/msal/">MSAL Python library</a></span>.</p>
<p>The hope is, you can <em>grab the blueprint, and drop it in</em> to your flask application, authentication done bish-bash-bosh, and then spend your time doing the more interesting stuff. <strong>You won't have to code up <em>any</em> authentication endpoints!</strong></p>
<p><span style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)">As always, go to the "I just want the code" section if you want to simply drop the blueprint into your app as quickly as possible without the detail. </span></p>
<ul>
<li><span style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)"><strong>Part 1</strong> of this blog will go through how to use the blueprint in your own flask app.</span></li>
<li><span style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)"><strong>Part 2</strong> will talk a bit about what is going on under the covers of the blueprint code. </span></li>
<li><span style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)"><strong>Part 3</strong> is a</span><span style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)"> 'bonus feature' of this application: As I was originally trying to figure out how to authenticate a </span><a style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)" href="http://dash.plotly.com">plotly dash</a><span style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)"> web app with AAD, I will show you how to do this with the same blueprint.</span></li>
</ul>
<p><span style="color: var(--color-text)">A future improvement might be to add this to </span><a style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)" href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins" target="_blank" rel="noopener">flask-login</a><span style="color: var(--color-text)">, but, I didn't. *shrug*</span></p>
<h3>Prerequisites</h3>
<ul>
<li>You have a Microsoft Azure account, or you can <a href="https://azure.microsoft.com/en-gb/free/" target="_blank" rel="noopener">create a free one.</a></li>
<li>You have the necessary permissions to create an app registration in the account
<ul>
<li>true if using the free account, or if you own your account</li>
<li>true if you own or can create a new/test 'azure active directory' within the account</li>
<li>not always true if you work for an organization with a DevOps / InfoSec function - but in this case you can ask them to add on your behalf</li>
</ul>
</li>
<li>You have heard of Flask</li>
<li>Have install of python 3.x</li>
</ul>
<h2>I just want the code</h2>
<p>Complete example project: <a href="https://github.com/andysprague44/flask.aad/">https://github.com/andysprague44/flask.aad/</a><span style="font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)"> </span></p>
<p>Authentication blueprint you can lift and drop into to your existing flask app: <a href="https://github.com/andysprague44/flask.aad/tree/master/blueprints/auth">https://github.com/andysprague44/flask.aad/tree/master/blueprints/auth</a></p>
<h1>Part 1: How to use the flask authentication blueprint</h1>
<p>Given an existing Flask app, how can we secure it?</p>
<h2>1a. Add an Azure App Registration</h2>
<p>For the Flask App to accept authentication requests from it's users it needs to be 'trusted' in the AAD domain. This is achieved by creating an 'App Registration', which represents the application in Azure-AAD-land.</p>
<p>1. Navigate to 'Azure Active Directory' in the left hand menu, then App registrations. Click 'New registration'</p>
<p><img class="alignnone  wp-image-386" style="color: inherit;font-family: var(--font-headings, 'Source Sans Pro', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif);font-size: 1.728em;font-weight: bold" src="https://andysprague.com/wp-content/uploads/2020/11/newappregistration_azureportal.png" alt="NewAppRegistration_AzurePortal" width="549" height="381" /></p>
<p><span style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)">2. Create the App Registration. Give it a useful name, choose the account types according to your needs, and add an initial redirect URL:</span></p>
<ul>
<li><span style="font-size: 1em;font-family: var(--font-base, 'Source Serif Pro', 'Baskerville Old Face', Garamond, 'Times New Roman', serif)">http://localhost:5000/auth/signin-oidc</span></li>
</ul>
<p><img class="alignnone  wp-image-400" src="https://andysprague.com/wp-content/uploads/2020/11/registeranapplication_azureportal-1.png" alt="RegisterAnApplication_AzurePortal" width="485" height="402" /></p>
<p>3. Add 'App Roles' (for more info, see https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps). Go to 'Manifest' tab in your app registration, and replace the line </p>
<blockquote>
<div>"appRoles": [],</div>
</blockquote>
<p>with the following (change 'DemoApp' to the name you chose for the app reg in step 2):</p>

<!-- wp:code -->
<pre class="wp-block-code"><code>"appRoles": &#091;
 {
 "allowedMemberTypes": &#091;"User"],
 "description": "Read Access",
 "displayName": "DemoApp Read",
 "id": "a8161423-2e8e-46c4-9997-f984faccb625",
 "isEnabled": true,
 "value": "DemoApp.Read"
 },
 {
 "allowedMemberTypes": &#091;"User"],
 "description": "Write Access",
 "displayName": "DemoApp Write",
 "id": "b8161423-2e8e-46c4-9997-f984faccb625",
 "isEnabled": true,
 "value": "DemoApp.Write"
 },
 {
 "allowedMemberTypes": &#091;"User"],
 "description": "Admin Access",
 "displayName": "DemoApp Admin",
 "id": "f2ec0750-6aee-4640-8f44-e050b8e35326",
 "isEnabled": true,
 "value": "DemoApp.Admin"
 }
 ],</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>4. Give your user the required app role(s), see https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps. </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Note that, in the blueprint, if a user has Admin they are assumed to have Write &amp; Read, and if the user has Write they are assumed to have Read.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">1b. Adding the blueprint</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>My project assumes you are using the <em><a href="https://hackersandslackers.com/flask-application-factory/">Flask Application Factory Pattern</a></em>, if you are not, well, you should be, so change your project structure then come back to this tutorial. If you can't be bothered, then fine (I guess), but you are somewhat on your own in hooking up this blueprint!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Good to carry on? OK then...</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, drop in the entire 'auth' blueprint folder into your app. I've assumed this is added to the path "<code>blueprints/auth</code>" relative to the project root.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then, add the following to your requirements.txt file:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>msal==1.6.0
flask-session==0.3.2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Then, register the blueprint in your app.py file, and use the decorator function <code>login_required</code> to secure your flask routes:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>from&nbsp;flask&nbsp;import&nbsp;Flask
from&nbsp;werkzeug.middleware.proxy_fix&nbsp;import&nbsp;ProxyFix
from&nbsp;flask_session&nbsp;import&nbsp;Session
from&nbsp;.&nbsp;import&nbsp;appsettings&nbsp;as&nbsp;config
from&nbsp;blueprints.auth.decorators&nbsp;import&nbsp;login_required

def&nbsp;create_app():
&nbsp;&nbsp;&nbsp;&nbsp;"""Construct&nbsp;core&nbsp;Flask&nbsp;application&nbsp;with&nbsp;embedded&nbsp;Dash&nbsp;app."""
&nbsp;&nbsp;&nbsp;&nbsp;app&nbsp;=&nbsp;Flask(__name__)
&nbsp;&nbsp;&nbsp;&nbsp;app.config.from_object('application.appsettings.FlaskConfig')
&nbsp;&nbsp;&nbsp;&nbsp;Session(app)
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;app.app_context():
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Register&nbsp;Flask&nbsp;routes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@app.route("/")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@login_required #**This decorator authenticates the flask route**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;index():
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;render_template('index.html',&nbsp;user=session&#091;"user"],&nbsp;version=msal.__version__)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Register&nbsp;blueprint&nbsp;for&nbsp;auth
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from&nbsp;blueprints&nbsp;import&nbsp;auth
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.register_blueprint(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;auth.construct_blueprint(config.AuthenticationConfig),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url_prefix='/auth')

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Fix&nbsp;"flask.url_for"&nbsp;when&nbsp;deployed&nbsp;to&nbsp;an&nbsp;azure&nbsp;container&nbsp;web&nbsp;app
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;See&nbsp;https://github.com/Azure-Samples/ms-identity-python-webapp/issues/18#issuecomment-604744997
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.wsgi_app&nbsp;=&nbsp;ProxyFix(app.wsgi_app,&nbsp;x_proto=1,&nbsp;x_host=1)
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;app</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Note that the example project splits out the flask routes to a routes.py file, but the approach is the same.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When registering the blueprint, you'll note the object <code>config.AuthenticationConfig</code> being passed in. This is a dict with the following keys, to add to a appsettings.py file (or perhaps a config.py in your own flask app):</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#&nbsp;Config&nbsp;required&nbsp;by&nbsp;the&nbsp;authentication&nbsp;flask&nbsp;blueprint
AuthenticationConfig&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;"TENANT":&nbsp;tenant,
&nbsp;&nbsp;&nbsp;&nbsp;"CLIENT_ID":&nbsp;client_id,
&nbsp;&nbsp;&nbsp;&nbsp;"CLIENT_SECRET":&nbsp;client_secret,
&nbsp;&nbsp;&nbsp;&nbsp;"HTTPS_SCHEME":&nbsp;https_scheme
}</code></pre>
<!-- /wp:code -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><strong>tenant</strong>: from your App Registration overview page this is the guid which at the time of writing is called "Directory (tenant) ID"</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>client_id</strong>: from your App Registration overview page this is the guid which at the time of writing is called "Application (client) ID"</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>client_secret</strong>: from your App Registration, go to 'Certificates &amp; secrets' page, and add a new client secret. Copy the value. Do not check this one into source control!</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><strong>https_scheme</strong>: this is either 'http' or 'https'. While running locally this can be 'http' but should always be 'https' when deployed to production.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>*Important</strong>*: Your flask session needs to use server-side sessions, to avoid the error "The "b'session'" cookie is too large".  Add <code>SESSION_TYPE&nbsp;=&nbsp;'filesystem'</code> to your flask app configuration:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>app.config.update(SESSION_TYPE = 'filesystem')</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">1c. Configuring your application</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>My approach to configuration is pretty 'dotnet'-like (with appsettings.json files), so you may prefer something like <a href="https://pypi.org/project/python-dotenv/">python-dotenv</a>; fine by me. However, if you are using the demo application, including it's configuration approach (rather than grabbing the blueprint alone) you'll need to do the following:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li>Copy file appsettings.json and rename the copy to appsettings.Development.json</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Leave appsettings.json alone (do not add your secrets here!)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Add your application config, including secrets, to appsettings.Development.json, noting that this file is ignored by git</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>If you add/remove keys, make sure to also update appsettings.py where the settings are materialized.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can then configure the application authentication blueprint differently per environment, by having different application registration entries and adding the config to an env specific appsettings.{env}.json file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are using your own configuration approach, you will need to construct the dict somewhere, and pass it into the blueprint.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#&nbsp;Config&nbsp;required&nbsp;by&nbsp;the&nbsp;authentication&nbsp;flask&nbsp;blueprint
AuthenticationConfig&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;"TENANT":&nbsp;tenant,
&nbsp;&nbsp;&nbsp;&nbsp;"CLIENT_ID":&nbsp;client_id,
&nbsp;&nbsp;&nbsp;&nbsp;"CLIENT_SECRET":&nbsp;client_secret,
&nbsp;&nbsp;&nbsp;&nbsp;"HTTPS_SCHEME":&nbsp;https_scheme
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">1d. Wrap up</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With any luck, you should now be able to run your application locally, and have your flask app up and running with Azure AAD without coding up <em>any </em>authentication endpoints yourself! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Part 2: What is the blueprint doing?</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The 'auth' blueprint uses the python MSAL library to mediate authentication. </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li>The python web application uses the Microsoft Authentication Library (MSAL) to obtain a JWT access token from the Microsoft identity platform (formerly Azure AD v2.0):</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The token contains the app roles of the authenticated user; accordingly, the blueprint code checks that the uses has at a minimum 'Read' access to the application, or authentications fails. </li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>The access token is saved into the flask session, for use later as a bearer token to authenticate the user in requests (e.g. calling the Microsoft Graph).</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:image {"linkDestination":"custom"} -->
<figure class="wp-block-image"><a href="https://github.com/Azure-Samples/ms-identity-python-webapp/blob/master/ReadmeFiles/topology.png" target="_blank" rel="noreferrer noopener"><img src="https://github.com/Azure-Samples/ms-identity-python-webapp/raw/master/ReadmeFiles/topology.png" alt="Overview" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>More details around the workflow can be found in the MSAL documentation, start here: <a href="https://github.com/Azure-Samples/ms-identity-python-webapp">https://github.com/Azure-Samples/ms-identity-python-webapp</a> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1 class="wp-block-heading">Part 3: Applying this to a plotly dash application</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Dash is a library for creating responsive web apps written declaratively in python (no javascript required!). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dash is powered by flask, so we are able to apply this same approach to securing dash applications. I followed the excellent walk-through at <a href="https://hackersandslackers.com/plotly-dash-with-flask/">https://hackersandslackers.com/plotly-dash-with-flask/</a> for the initial "add flask to dash" approach.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The trick is to start up Dash with a <em>flask server that we control. </em>To do this, we can add the dash app initialization as a step in the flask 'create_app' method (again, this assumes flask application factory pattern is utilized, in this case it's probably mandatory). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Your 'create_app' method can add these 2 lines, right after the flask routes and the authentication blueprint are registered: </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#&nbsp;Register&nbsp;an&nbsp;embedded&nbsp;dash&nbsp;app
from&nbsp;.dashapp&nbsp;import&nbsp;create_dashapp
app&nbsp;=&nbsp;create_dashapp(app)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Then add the file 'dashapp.py' containing a factory method 'create_dashapp' that takes the flask app as a parameter (called server' to avoid confusion with the dash 'app'). Now, we can start the dash app up, using our existing flask app!</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def&nbsp;create_dashapp(server):
&nbsp;&nbsp;&nbsp;&nbsp;"""
&nbsp;&nbsp;&nbsp;&nbsp;Init&nbsp;our&nbsp;dashapp,&nbsp;to&nbsp;be&nbsp;embedded&nbsp;into&nbsp;flask
&nbsp;&nbsp;&nbsp;&nbsp;"""
&nbsp;&nbsp;&nbsp;&nbsp;app&nbsp;=&nbsp;dash.Dash(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__name__,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server=server,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url_base_pathname='/dash/')
&nbsp;&nbsp;&nbsp;&nbsp;app.config&#091;'suppress_callback_exceptions']&nbsp;=&nbsp;True
&nbsp;&nbsp;&nbsp;&nbsp;app.title&nbsp;=&nbsp;'My&nbsp;Dash&nbsp;App'
&nbsp;&nbsp;&nbsp;&nbsp;
    #... add dash callbacks &amp; layout code here
    
    #&nbsp;End&nbsp;of&nbsp;create_dashapp&nbsp;method,&nbsp;return&nbsp;the&nbsp;flask&nbsp;app&nbsp;aka&nbsp;server&nbsp;(not&nbsp;the&nbsp;dash&nbsp;app)
    return app.server</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The last step is how we fold in the authentication piece. We can protect the dash views, so that if a user navigates directly to '/dash' will be redirected to authenticate as we expect. Add the following method to dashapp.py:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>from&nbsp;blueprints.auth.decorators&nbsp;import&nbsp;login_required
def&nbsp;protect_dashviews(dash_app):
&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;view_func&nbsp;in&nbsp;dash_app.server.view_functions:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;view_func.startswith(dash_app.config.url_base_pathname):
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dash_app.server.view_functions&#091;view_func]&nbsp;=&nbsp;login_required(dash_app.server.view_functions&#091;view_func])</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And add an additional line to the 'create_dashapp' factory method:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def&nbsp;create_dashapp(server):
&nbsp;&nbsp;&nbsp;&nbsp;"""
&nbsp;&nbsp;&nbsp;&nbsp;Init&nbsp;our&nbsp;dashapp,&nbsp;to&nbsp;be&nbsp;embedded&nbsp;into&nbsp;flask
&nbsp;&nbsp;&nbsp;&nbsp;"""
    app&nbsp;=&nbsp;dash.Dash(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__name__,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server=server,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url_base_pathname='/dash/')
&nbsp;&nbsp;&nbsp;&nbsp;app.config&#091;'suppress_callback_exceptions']&nbsp;=&nbsp;True
&nbsp;&nbsp;&nbsp;&nbsp;app.title&nbsp;=&nbsp;'My&nbsp;Dash&nbsp;App'
&nbsp;&nbsp;&nbsp;&nbsp;protect_dashviews(app) #***We just added this line***</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>Your dash app is now authenticated!</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One last thing to note in the dash app, is that I found it quite tricky to get the name of the authenticated user <em>inside </em>of the dash app components, especially immediately after the user authenticates. To achieve this, add the following component to the dash app layout:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>dcc.Location(id='url',&nbsp;refresh=False),&nbsp;#&nbsp;represents&nbsp;the&nbsp;URL&nbsp;bar,&nbsp;doesn't&nbsp;render&nbsp;anything</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Then add a callback to grab the name, which is fired when the redirection from the authentication workflow takes the user back to the dash app:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#&nbsp;Add&nbsp;callback&nbsp;for&nbsp;writing&nbsp;name&nbsp;of&nbsp;user&nbsp;to&nbsp;navbar
&nbsp;&nbsp;&nbsp;&nbsp;@app.callback(Output('navbar-navigation',&nbsp;'label'),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Input('url',&nbsp;'pathname'))
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;user_name_to_navbar(pathname):
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;'user'&nbsp;in&nbsp;flask.session:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;=&nbsp;flask.session&#091;'user'].get('name',&nbsp;'unknown')
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;=&nbsp;'unknown'
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;user</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Obviously, the above relies on the existence of the element 'navbar-navigation', so change the output to wherever you need to write the username to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I hope you found this useful. Chat in the comments with your suggestions on how to make this better, or raise a Pull Request. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy flask'ing!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date><![CDATA[2020-11-11 00:29:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-11-11 00:29:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-09-08 17:52:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-09-08 17:52:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[flask-blueprint-for-microsoft-azure-aad-authentication-oauth-2-0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="azure"><![CDATA[azure]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_53e910fb018d6ee067640f974a837294]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[50919669171]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_6c040f6a54d08b15498e9bfb7b96b14497ae1c45]]></wp:meta_key>
		<wp:meta_value><![CDATA[[contact-field label="Name" type="name" required="1"/][contact-field label="Email" type="email" required="1"/][contact-field label="Website" type="url"/][contact-field label="Comment" type="textarea" required="1"/]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_atts_6c040f6a54d08b15498e9bfb7b96b14497ae1c45]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:10:{s:2:"to";s:24:"andy.sprague44@gmail.com";s:7:"subject";s:69:"[Andy Sprague] Flask Blueprint for Microsoft Azure AAD Authentication";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:2:"id";i:260;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c8e4c81f9522c96706cb1a251aae7219]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1605054577]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[u:wpcom-ufa-v4:1694195525]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[footnotes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>14966</wp:comment_id>
			<wp:comment_author><![CDATA[Jim Mimlitsch]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jim_jr@mimlitsch.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[68.111.69.118]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-02-02 01:11:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-02-02 01:11:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice write up!  Do you know if Werkzeug 0.16.0 is still a requirement for MSAL?  I remember reading something saying that was the case for MSAL 1.2.0, but I haven't found anything more recent.  Thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>182359471</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1612228266.918732;s:5:"event";s:9:"check-ham";s:4:"user";s:17:"jimjrmimlitschcom";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_jobid]]></wp:meta_key>
			<wp:meta_value><![CDATA[54218823937]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_queued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1612229867]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1612229867]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1612229868.201489;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>14971</wp:comment_id>
			<wp:comment_author><![CDATA[andysprague44]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[andy.sprague44@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://andysprague.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[20.43.14.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-02-05 03:24:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-02-05 03:24:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks! To answer your question, msal doesn't need Werkzeug, but Flask does. I installed Flask==1.2.0, and it installed Werkzeug==1.0.1 (where the transistive dependency is Werkzeug&gt;=0.15, see https://github.com/pallets/flask/blob/master/setup.py)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>14966</wp:comment_parent>
			<wp:comment_user_id>61767449</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1612495475]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1612495476.111166;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_jobid]]></wp:meta_key>
			<wp:meta_value><![CDATA[54352696234]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_queued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1612495476]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>16229</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[yassin.alhafiz@hatch.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.46.127.6]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-02-20 16:49:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-02-20 16:49:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey there, wondering if this works with B2C logins?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1708447759.324592;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_guid]]></wp:meta_key>
			<wp:meta_value><![CDATA[93519b61d2cc37259d2d5a7480e03f75]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1708452069.619017;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Azure Table Storage - QueryAsync]]></title>
		<link>https://andysprague.com/2020/12/04/azure-table-storage-queryasync/</link>
		<pubDate>Fri, 04 Dec 2020 00:33:28 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">http://andysprague.com/?p=441</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Quick one today. I have been playing around with Azure Table Storage using the "WindowsAzure.Storage" library in dotnet, and was failing to find anything useful on querying multiple rows. Using the 'TableContinuationToken' was a little confusing to me, and a lot of the example on the net are out of date (who knows, this may also be out of date by the time you read it!). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The below extension method works for at least WindowsAzure.Storage v9.3.3.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.WindowsAzure.Storage.Table;

/// &lt;summary&gt;
/// Get rows from an Azure Storage Table.
/// &lt;/summary&gt;
/// &lt;typeparam name="TEntity"&gt;type of entity, extending Microsoft.WindowsAzure.Storage.Table.TableEntity&lt;/typeparam&gt;
/// &lt;param name="table"&gt;the CloudTable, e.g. _tableClient.GetTableReference("table_name");&lt;/param&gt;
/// &lt;param name="tableQuery"&gt;a TableQuery object, e.g. for filter, select&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static async Task&lt;List&lt;TEntity&gt;&gt; QueryAsync&lt;TEntity&gt;(
	this CloudTable table,
	TableQuery&lt;TEntity&gt; tableQuery) where TEntity : TableEntity, new()
{
	List&lt;TEntity&gt; results = new List&lt;TEntity&gt;();
	TableContinuationToken continuationToken = default;
	do
	{
		var queryResults = await table.ExecuteQuerySegmentedAsync(tableQuery, continuationToken);
		continuationToken = queryResults.ContinuationToken;
		results.AddRange(queryResults.Results);
	} while (continuationToken != null);

	return results;
}
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>And here is how to use it:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp","lineNumbers":false} -->
<pre class="wp-block-syntaxhighlighter-code">public class MyEntity : Microsoft.WindowsAzure.Storage.Table.TableEntity
{
    public string AnotherField { get; set; }
}

var storageAccount = CloudStorageAccount.Parse(connectionString);
var tableClient  = storageAccount.CreateCloudTableClient();&lt;/p&gt;
var table = tableClient.GetTableReference("table_name");

//To get all rows in a single partition
var tableQuery = new TableQuery&lt;MyEntity&gt;().Where(TableQuery.GenerateFilterCondition("PartitionKey", QueryComparisons.Equal, "partitionKey"));
List&lt;MyEntity&gt; results = await table.GetAsync&lt;MyEntity&gt;(tableQuery);

//To get all rows
var tableQuery = new TableQuery&lt;MyEntity&gt;();
List&lt;MyEntity&gt; results = await table.GetAsync&lt;MyEntity&gt;(tableQuery);
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>You can build up more complex queries using the TableQuery object, there is plenty of material that covers that, e.g. &lt;https://vkinfotek.com/azureqa/how-do-i-query-azure-table-storage-using-tablequery-class.html&gt;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's all folks!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date><![CDATA[2020-12-04 00:33:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-04 00:33:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-04 16:02:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-04 16:02:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[azure-table-storage-queryasync]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="azuretablestorage"><![CDATA[AzureTableStorage]]></category>
		<category domain="category" nicename="dontnet"><![CDATA[dontnet]]></category>
		<category domain="post_tag" nicename="tablecontinuationtoken"><![CDATA[TableContinuationToken]]></category>
		<category domain="post_tag" nicename="windowsazure-storage"><![CDATA[WindowsAzure.Storage]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[51802295263]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1607042010]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_6c040f6a54d08b15498e9bfb7b96b14497ae1c45]]></wp:meta_key>
		<wp:meta_value><![CDATA[[contact-field label="Name" type="name" required="1"/][contact-field label="Email" type="email" required="1"/][contact-field label="Website" type="url"/][contact-field label="Comment" type="textarea" required="1"/]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_atts_6c040f6a54d08b15498e9bfb7b96b14497ae1c45]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:11:{s:2:"to";s:24:"andy.sprague44@gmail.com";s:7:"subject";s:47:"[Andy Sprague] Azure Table Storage - QueryAsync";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:2:"id";i:441;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouHeading";s:12:"Message Sent";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[u:wpcom-ufa-v3-beta:1673599180]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>16000</wp:comment_id>
			<wp:comment_author><![CDATA[C# Azure Table Storage QueryAsync, Paging and Filtering | Brian Pedersen&#039;s Sitecore and .NET Blog]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://briancaos.wordpress.com/2022/11/11/c-azure-table-storage-queryasync-paging-and-filtering/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.0.113.69]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-11-11 07:48:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-11-11 07:48:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Azure Table Storage – QueryAsync from Andy Sprague [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1668263066]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1668263067.118387;s:5:"event";s:15:"status-approved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1668263077.160159;s:5:"event";s:17:"status-unapproved";s:4:"user";s:13:"andysprague44";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1668157069.61442;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1668152935.736329;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>16230</wp:comment_id>
			<wp:comment_author><![CDATA[Seb Ko]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[89.68.1.228]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-03-01 22:30:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-03-01 22:30:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[`The type initializer for 'ObjectToITableEntityConverter`1' threw an exception. Microsoft.Azure.WebJobs.Extensions.Storage: If the Timestamp property is present, it must be a DateTimeOffset.`  

but interface `ITableEntity` wants `DateTimeOffset?` 
.NET6]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1709332246.366193;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_guid]]></wp:meta_key>
			<wp:meta_value><![CDATA[c2880fde06eca5ee8d10ffe92cb6a49e]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
			<wp:meta_value><![CDATA[facebook]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://graph.facebook.com/v6.0/358250870525479/picture?type=large]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1709337133.870387;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>16232</wp:comment_id>
			<wp:comment_author><![CDATA[Azure Table Storage Create Read Update Delete entities &#8211; a base class implementation using C# | Brian Pedersen&#039;s Sitecore and .NET Blog]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://briancaos.wordpress.com/2025/03/10/azure-table-storage-create-read-update-delete-entities-a-base-class-implementation-using-c/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.0.99.63]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2025-03-10 10:51:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2025-03-10 10:51:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Azure Table Storage – QueryAsync by andysprague [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_guid]]></wp:meta_key>
			<wp:meta_value><![CDATA[7d9aa050b6a391d30564f6fc6467c305]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1741603868.367574;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1741608207.665246;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Python environment magic (conda -&gt; requirements.tx -&gt; setup.py)]]></title>
		<link>https://andysprague.com/?p=2798</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andysprague.com/?p=2798</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I recently was working on a python project with an interesting build/release process based on <em>both </em>a requirements.txt file and a setup.py file. The ask was to create an easy way for a developer to work on this project using conda envs. This is where I discovered some magic!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Option 1: Not a 1-liner</h2>
<!-- /wp:heading -->

<!-- wp:heading -->
<h2>A better way</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2798</wp:post_id>
		<wp:post_date><![CDATA[2022-11-17 23:10:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-11-17 23:10:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-11-17 23:10:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Python - (Ab)Using Environments]]></title>
		<link>https://andysprague.com/2022/12/02/python-abusing-environments/</link>
		<pubDate>Fri, 02 Dec 2022 21:56:09 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andysprague.com/?p=2883</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph {"placeholder":"What are your two favorite things to wear?"} -->
<p>So I recently picked up a legacy(ish) python application that had a CI/CD pipeline that built from a setup.py file (think: <code>python setup.py build</code>). I wanted to create a local dev environment using the only sensible choice (excluding docker) - <em>conda</em>. I also wanted to utilize an <em>environment.yml</em> file to give new developers a very quick path to creating an exact match of the environment. Finally - I'm lazy*, and did not want to re-engineer all of the existing CI/CD pipelines to use conda.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm not going into much detail here, if you are new to environment.yml files read this first: <a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I also welcome any feedback or better approaches in the comments, mixing "python environment management" paradigms is playing with fire.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>* <em>maybe lazy is the wrong word - my choices on how to setup my local dev env should not necessarily impact how it's deployed in production. Put another way - one might not have the capacity or influence to change that decisio</em>n <em>in a large organization</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">setup.py</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Option 1 - get me a conda env please!</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>from setuptools import setup, find_packages

config = {
    'description': 'andysprague.com tutorial helper',
    'author': 'Andy Sprague',
    'url': 'andysprague.com',
    'version': '0.0.1',
    'install_requires': &#091;
        'requests==2.7.0',
    ],
    'packages': find_packages(),
    'name': 'myapp'
}

setup(**config)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Given the above as a starting point (from my legacy app), how to spin up a local conda env, and persist as an environment.yml file?</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"powershell"} -->
<pre class="wp-block-syntaxhighlighter-code">conda create -n mycondaenv python=3.9 -y
conda activate mycondaenv
python setup.py develop
conda env freeze &gt; environment.yml</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>We have lift-off! Now my new developer Bob can run this to get their env up and running:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"powershell"} -->
<pre class="wp-block-syntaxhighlighter-code">conda env -f environment.yml -n bobcondaenv
conda activate bobcondaenv</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>The environment.yml file is (after tidy up):</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"yaml"} -->
<pre class="wp-block-syntaxhighlighter-code"># environment.yml
name: myenv
channels:
  - defaults
dependencies:
  - pip=22.2.2
  - python=3.9.15
  - pip:
    - requests==2.7.0</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Downside? You are now maintaining library versions in <strong>2 places</strong>: the setup.py file, <em>and </em>the environment.yml file. Trust me when I say they will <em>not </em>remain in sync, </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>... and that you'll only find out in production!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">requirements.txt</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>So how can we link <em>environment.yml</em>, to pull dependencies from <em>setup.p</em>y? We need a <strong>go-between</strong>, which is probably familiar to you my avid python reader ... it's the <em>requirements.txt</em> file of course. We can set up a requirement.txt file like this, so it uses the setup.py file for the list of dependencies:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code"># requirements.txt
-e .</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>And the environment.yml file can <em>reference the requirement.txt file</em> (neat!):</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"yaml"} -->
<pre class="wp-block-syntaxhighlighter-code"># environment.yml
name: myenv
channels:
  - defaults
dependencies:
  - pip=22.2.2
  - python=3.9.15
  - pip:
    - -r requirements.txt</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Now our dev env and our production remains in sync, and we can have a quick path to productivity for any new developers.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Bonus Content</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We want to add some unit testing, right? We also want our IDEs to do linting, formatting and autocomplete? What about support for jupyter notebooks for data exploration?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We don't need those in prod though. We have accidentally introduced a separation of concerns above: <em>environment.yml</em> for dev, <em>setup.py</em> for prod. We can specify dev only resources in our environment.yml file! </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"yaml"} -->
<pre class="wp-block-syntaxhighlighter-code"># environment.yml
name: myenv

channels:
  - defaults

dependencies:
  - pip=22.2.2
  - python=3.9.15

  # Test/Dev
  - autopep8
  - pylint
  - pytest
  - mock

  # Jupyter: run `jupyter notebook`
  - notebook
  - nb_conda_kernels
  - jupyter_contrib_nbextensions
  
  # Actual application dependencies
  - pip:
    - -r requirements.txt</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Happy coding!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2883</wp:post_id>
		<wp:post_date><![CDATA[2022-12-02 21:56:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-12-02 21:56:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-01-10 20:51:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-01-10 20:51:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python-abusing-environments]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[u:wpcom-ufa-v3-beta:1673383892]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[79284627648]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1670018173]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Diagrams as Code - C4 diagrams with Azure icons]]></title>
		<link>https://andysprague.com/2023/01/11/diagrams-as-code-c4-diagrams-with-azure-icons/</link>
		<pubDate>Wed, 11 Jan 2023 20:46:51 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andysprague.com/?p=3085</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This article is very persuasive. By the end you will wonder why you ever used Visio. It gets more technical as you progress, so stop reading whenever you want (I suppose this is true whether I wrote this sentence or not).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I discuss:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><em>C4 diagrams </em>(and why)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>how to use <em>code</em> to generate them (and why)</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>how I have gone about doing it (plantuml, Azure icons, font-awesome-5 icons).</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Just want the code? <a href="https://github.com/andysprague44/sprague.andy.plantuml.c4">https://github.com/andysprague44/sprague.andy.plantuml.c4</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">C4</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>C4 diagrams are a great way to visualize a system design from different levels of detail. You share C1 with the CEO, C2 with the CTO and stakeholders .. and then you never need to create C3 and C4 diagrams for lower level detail as this emerges from a good code base and face-to-face discussions within the team (or, at a push, it's a photo of a whiteboard sketch).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For more on what C4 is, see <a href="https://www.infoq.com/articles/C4-architecture-model">https://www.infoq.com/articles/C4-architecture-model</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Diagrams as Code</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Diagrams as code (DaC)... </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>How many times have you seen a Visio diagram in a power point presentation shared with you, that you want to correct / update / use as a template? </li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Did the original visio file come with that? [If it did, go and congratulate the author right now!] </li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Or, worse, the diagram was created <em>in </em>powerpoint [dragging rectangles for a few hours anyone?]</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>In addition, systems change and evolve, and it's not often that the diagrams evolve with it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Solution? <em>Put the diagrams with the code, in the same repo</em>. Ergo, <strong>Diagrams as Code</strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now, you could just save the visio / powerpoint / png to the repo, but here comes the second advantage of diagrams as code - the "code" is essentially a text file that describes a diagram, and then that diagram is <em>generated for you</em>. You may have to do some massaging to get it to display exactly as you want, but it's much better and time efficient to add/delete 1 line of a text file, than dragging rectangles around on a WYSYWIG editor for a few hours, in my humble opinion. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>If you disagree</em>, the rest of this article is not for you (spend the time you save by not reading on to have a strong word with yourself and question your life priorities).</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">plantuml</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are a plethora of Diagram as Code solutions out there. I choose plantuml for it's simplicity, because it's not tied to a particular programming language, and because it has a vs code plugin. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The example diagrams on the plantuml site are not pretty, so I suggest you start with C4 support in the standard library: <a href="https://github.com/plantuml-stdlib/C4-PlantUML">https://github.com/plantuml-stdlib/C4-PlantUML</a>. For implementation agnostic C4 diagramming with plantuml start here, and do not read further.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">plantuml in vs code</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>plantuml has plugins for many IDEs and text editors, see if yours is supported here: <a href="https://plantuml.com/running">https://plantuml.com/running</a> <em>-&gt; Text editors and IDE</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For VS Code ... install extension "PlantUML"</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":3112,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://andysprague.com/wp-content/uploads/2023/01/image.png?w=1024" alt="" class="wp-image-3112" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Add a file <em>testdot.wsd</em> with these contents:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">@startuml test
testdot
@enduml</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Right click and selection "Preview Current Diagram" (shortcut Alt + D), you should see something like:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":3114,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://andysprague.com/wp-content/uploads/2023/01/image-1.png?w=367" alt="" class="wp-image-3114" /></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">We got here... creating diagrams!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The easiest thing to do here is to give you my template, that supports C4, Azure and font-awesome icons (e.g. a component to represent an excel file). Copy to your project, and get diagramming!</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">@startuml C1_MyApp_SystemContext
'Alt + D to preview
!pragma revision 1

'C4
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Context.puml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml

'Azure
'Search the full list here: &lt;https://github.com/RicardoNiepel/Azure-PlantUML/blob/master/AzureSymbols.md#azure-symbols&gt;
!define Azure https://raw.githubusercontent.com/RicardoNiepel/Azure-PlantUML/master/dist
!includeurl Azure/AzureCommon.puml
!includeurl Azure/AzureC4Integration.puml
!includeurl Azure/Web/AzureWebApp.puml

'Comment/uncomment the next line for simplified view of Azure sprites
'!includeurl Azure/AzureSimplified.puml

'FontAwesome and other icon sets
' Search the full list here: &lt;https://github.com/tupadr3/plantuml-icon-font-sprites#icon-sets&gt;
!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v2.4.0
!includeurl ICONURL/font-awesome-5/file_excel.puml

title [System Context] My Application

'left to right direction

Person(personAlias, "Label", "Optional Description")
AzureWebApp(containerAlias, "Label", "Technology", "Optional Description")
Component(systemAlias, "Label", "Technology", "Optional Description", $sprite=file_excel)

personAlias --&gt; containerAlias : Uses\n[Optional Technology]
containerAlias -right-&gt; systemAlias #Purple : Generates

@enduml</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:image {"id":3118,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://andysprague.com/wp-content/uploads/2023/01/c1_myapp_systemcontext.png?w=407" alt="" class="wp-image-3118" /></figure>
<!-- /wp:image -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Layout Tweaking</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I prefer to use the --&gt; syntax for defining arrows over the "Rel" component of C4 library as it seems to give more control over how the diagram gets rendered. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For some ways to play around with the formatting start here: <a href="https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html">https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Use sparingly!</strong> If you customize the format too much, it makes changes in the future harder as you'll need to play around with getting it "just right" all over again.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>That's all folks!</strong></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3085</wp:post_id>
		<wp:post_date><![CDATA[2023-01-11 20:46:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-01-11 20:46:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-06-05 18:15:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-06-05 18:15:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[diagrams-as-code-c4-diagrams-with-azure-icons]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e9082c64f6f2f57c3459aa13704ffd00]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[u:wpcom-ufa-v3-beta:1685988929]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[80459122563]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1673470014]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Super Power your git config]]></title>
		<link>https://andysprague.com/2023/03/10/super-power-your-git-config/</link>
		<pubDate>Fri, 10 Mar 2023 18:25:31 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andysprague.com/?p=3386</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>git is the defacto way to manage source code, if you haven't heard of git this blog is not for you. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are a <em>software developer</em>, <em>data scientist</em>, <em>data engineer</em>, <em>dev ops engineer</em> or frankly in <em>any role that touches software development</em>, and you haven't heard of git ... well, where have you been?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>git config is the way to manage the default behaviors of git and I'd always recommend setting some basic config above what comes out of the box. Run the following in git console (or cmd line if git is on your env variables PATH):</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">git config --global core.autocrlf false
git config --global fetch.prune true
git config --global push.default true</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>In order, what the above is doing is:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>core.autocrlf false: <em>or true</em>, lots of debate on this one (e.g. <a href="https://stackoverflow.com/questions/2825428/why-should-i-use-core-autocrlf-true-in-git">https://stackoverflow.com/questions/2825428/why-should-i-use-core-autocrlf-true-in-git</a>) so just agree a convention in your team and stick with it<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><strong>or better</strong>: use .gitattributes in your repo so it's not relevant and future developers don't introduce a load of line ending only diffs from their personal preference, see <a href="https://rehansaeed.com/gitattributes-best-practices/#line-endings">https://rehansaeed.com/gitattributes-best-practices/#line-endings</a>).</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list --></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>fetch.prune true: If the remote branch is deleted, it's deleted from your "remotes/" branches locally, which just makes sense to me.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>push.default current: Don't have to specify the branch you are pushing ("git push -u feature/my-change") , you always push the branch you currently have checked out ("git push").</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">git alias's</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Alias's are really cool way to type less when doing the basic git operations you do everyday, and also as a way to remember the more complicated ones so you don't have to. For example </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><code>git co</code> rather than <code>git checkout</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>git c 'my message'</code> rather than <code>git commit -m 'my message'</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>git rom</code> rather than <code>git fetch; git rebase origin/master</code></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>git track</code> rather than <code>branch=$(git rev-parse --abbrev-ref HEAD); git branch --set-upstream-to=origin/${1-$branch} $branch;</code></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Might not seem a lots but if you are typing these multiple times an hour for the rest of your working life, it adds up!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To add a single alias:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">git config --global alias.co checkout</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>To add a bunch, it's probably easier to open the actual .gitconfig file: <strong><code>git config --global --edit</code></strong>. If this opens something unmanagable like a vim editor (see next section), remember the location of the file and open it in notepad or your favorite text editor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then add the following, or pick and choose, or add your own!</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">[alias]
	s = status
	co = checkout
	c = commit -m
	a = add .
	ac = "!f(){ git add . &amp;&amp; git commit -m \"$1\";};f"
	l = log --oneline -10
	caa = "!f(){ git add . &amp;&amp; git commit -a --amend -C HEAD; };f"
	dad = !curl -s https://icanhazdadjoke.com/
	ptag = push origin --tags
	cp = cherry-pick
	cpc = cherry-pick --continue
	rb = rebase
	rbc = rebase --continue
	rom = "!f(){ git fetch; git rebase origin/master;};f"
	spull = "!f(){ git stash; git pull; git stash apply;};f"
	wip = "!f(){ git add .; git commit -m \"WIP\";};f"
	url = remote get-url --all origin
	mt = mergetool
	mc = merge --continue
	track = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git branch --set-upstream-to=origin/${1-$branch} $branch; };f" </pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Now to use your alias you can replace the long version with the short version. For example: <code>git ac "short description of my change"</code>, adds all local changes and commits them.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">git text editor</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Setting additional defaults to use a sensible text editor when user input required is also a game changer. The below is relevant for <strong>vscode</strong>, but there are equivalents for notepad++, atom, or any other sensible text editor; google is your friend. </p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">[diff]
	tool = vscode
[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE
[merge]
	tool = vscode
[mergetool]
	trustExitCode = false
	keepBackup = false
	keepTemporaries = false
[mergetool "vscode"]
	cmd = code --wait $MERGED
[core]
	editor = code --wait</pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p>Now if you run something like <code>git mergetool</code>, your merge conflicts will open in a new vscode window and you can resolve them there with vscode's support. Or, <code>git config --global --edit</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">git init</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Last but not least, support for git templates is something I use often, for adding some commit hooks whenever you initialize a new git repo or checkout a new one from a remote.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>[init] <br> templatedir = ~/.git-templates<br><br>Then add a '.git-templates' folder in the same location as the '.gitconfig' file. Then inside that a folder "hooks" and 2 files (no file extension):</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>post-commit</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">#!/bin/sh

#Print commit hash
git log -1 --format=format:%h</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>pre-push</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">#!/bin/sh

# adds a link to generate an Azure DevOps PR on the command line
# for github change to something like `$url/$branch/compare`
url="$2"
branch=$(git rev-parse --abbrev-ref HEAD | sed 's./.%2F.g')
echo ""
echo "Create PR at: $url/pullrequestcreate?sourceRef=$branch"
echo ""</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>It should look something like:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":3406,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img src="https://andysprague.com/wp-content/uploads/2023/03/image.png?w=855" alt="" class="wp-image-3406" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This adds a link to generate a PR on the command line. The above is specific to Azure DevOps and will need to be played around with for you git provider. e.g. something like <code>echo "Create PR at: $url</code>/<code>$branch/compare</code>" might work for github.</p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>That's all folks!</p>
<!-- /wp:paragraph -->

<!-- wp:crowdsignal-forms/applause {"pollId":"951b93d6-f79b-427c-ad69-8b78147fe5ce","title":"Untitled Applause 3","answerId":"20c55290-f43b-44e6-a7b3-cced30a0ac99"} /-->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3386</wp:post_id>
		<wp:post_date><![CDATA[2023-03-10 18:25:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-03-10 18:25:31]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-03-10 18:25:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-03-10 18:25:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[super-power-your-git-config]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_cs_poll_951b93d6-f79b-427c-ad69-8b78147fe5ce]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:7:{s:2:"id";i:11906117;s:8:"question";s:0:"";s:4:"note";s:0:"";s:8:"settings";a:10:{s:5:"title";s:19:"Untitled Applause 3";s:10:"after_vote";s:7:"results";s:13:"after_message";s:0:"";s:17:"randomize_answers";b:0;s:20:"restrict_vote_repeat";b:0;s:7:"captcha";b:0;s:15:"multiple_choice";b:0;s:12:"redirect_url";s:0:"";s:12:"close_status";s:4:"open";s:11:"close_after";b:0;}s:7:"answers";a:1:{i:0;a:3:{s:11:"answer_text";s:4:"clap";s:2:"id";i:54202586;s:9:"client_id";s:36:"20c55290-f43b-44e6-a7b3-cced30a0ac99";}}s:11:"source_link";s:39:"https://andyspraguedotcom.wordpress.com";s:9:"client_id";s:36:"951b93d6-f79b-427c-ad69-8b78147fe5ce";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_crowdsignal_forms_poll_ids]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;i:11906117;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[u:wpcom-ufa-v3-beta:1678472857]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1678472734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[82197387921]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[My First Custom Excel-DNA Add-In (dotnet6 edition)]]></title>
		<link>https://andysprague.com/2023/03/14/my-first-custom-excel-dna-add-in-dotnet6-edition/</link>
		<pubDate>Tue, 14 Mar 2023 05:50:39 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andysprague.com/?p=3420</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This is an upgrade to my earlier blog "<code><a href="https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna/">My First Custom Excel Ribbon using&nbsp;Excel-DNA</a></code>", <em>now written for dotnet core</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I  add in Microsoft.Extensions support for <em>dependency injection</em>, <em>configuration</em>, and for <em>logging</em>, which should be an easy way to hook up to your app settings, plus quickly set-up your DI and logging frameworks of choice (e.g. <a href="https://www.nuget.org/packages/Autofac.Extensions.DependencyInjection">https://www.nuget.org/packages/Autofac.Extensions.DependencyInjection</a> &amp; <a href="https://www.nuget.org/packages/Serilog.Extensions.Logging">https://www.nuget.org/packages/Serilog.Extensions.Logging</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Just want the code? </h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://github.com/andysprague44/excel-dna-azure-service-bus/tree/main/src/Skeleton.ExcelAddIn">https://github.com/andysprague44/excel-dna-azure-service-bus/tree/main/src/Skeleton.ExcelAddIn</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">This is a short blog...</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To get started, feel free to clone the project I link to above. This idea is that this is a skeleton project from which you can do what you want. For example, I wanted to call an Azure Service Bus to do some long running work (the other project in that solution, blog post coming soon!).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Be sure to use Visual Studio</strong> <strong>&gt;= 2022</strong> - this is a strong recommendation, I have tried Rider and it doesn't fly.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Dependency Injection</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Should work out of the box - - register your dependencies in the class <strong>ContainerOperations.cs. </strong></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">internal static class ContainerOperations
{
	//Excel needs some extras help in only registering dependencies once
	private static readonly Lazy&lt;IServiceProvider&gt; ContainerSingleton = new(() =&gt; CreateContainer());
	public static IServiceProvider Container =&gt; ContainerSingleton.Value;

	//The DI registrations
	internal static IServiceProvider CreateContainer(string? basePath = null)
	{
		var container = new ServiceCollection();
		
		//register dependencies here...
        //e.g. container.AddSingleton&lt;ExcelController&gt;();

		return container.BuildServiceProvider();
	}
}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>If you want to add support for a more fully featured DI framework, <code>CreateContainer </code> is the place to do so.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One thing of note is that Excel-DNA (or excel com, who knows) decides to try and call the  <code>CreateContainer</code> method twice, so I wrapped in the Lazy singleton pattern to be defensive against this. I found out this when registering a dependency on something that <em>has </em>to be a singleton, and it was causing problems - in my case the Launch Darkly Client SDK (<a href="https://launchdarkly.com/">https://launchdarkly.com/</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Logging</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I implemented Serilog in this project. If you prefer another logging framework, change the method <code>ConfigureLogging</code> in the <strong>ContainerOperations.cs </strong>class. This should be all that is required! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>From there logging is via the higher level Microsoft.Extensions.Logging API.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">private static ILoggerFactory ConfigureLogging(IConfiguration configuration)
	{
		var config = configuration.GetSection("AppSettings");
		var appVersion = config["Version"] ?? "Unknown Version";
		var serilog = new Serilog.LoggerConfiguration()
			.ReadFrom.Configuration(config)
			.Enrich.WithProperty("AppName", "My.ExcelAddIn")
			.Enrich.WithProperty("AppVersion", appVersion)
			.CreateLogger();

		return new LoggerFactory(new[] { new SerilogLoggerProvider(serilog) });
	}</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Configuration / App Settings</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>ContainerOperations.cs</strong> is again the place where settings are initialized. This project uses the appsettings.json pattern to define (env specific) configuration. You can pass in the class <code>AppSettings</code> to the constructor of anything that needs it (see <code>ExcelController</code> for example). Nice!</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"csharp"} -->
<pre class="wp-block-syntaxhighlighter-code">basePath ??= ExcelDnaUtil.XllPathInfo?.Directory?.FullName ??
			throw new Exception($"Unable to configure app, invalid value for ExcelDnaUtil.XllPathInfo='{ExcelDnaUtil.XllPathInfo}'");
	
		IConfiguration configuration = new ConfigurationBuilder()
			.SetBasePath(basePath)
			.AddJsonFile("appsettings.json")
#if DEBUG
			.AddJsonFile("appsettings.local.json", true)
#endif
			.Build();

		var settings = configuration.GetSection("AppSettings").Get&lt;AppSettings&gt;();
		if (settings == null)
			throw new Exception("No appsettings section found called AppSettings");

		container.AddSingleton(_ =&gt; settings);</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Where is the ribbon?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The CustomRibbon implementation is unchanged so feel free to refer to my original blog that set this up and re-use: <a href="https://andysprague.com/2017/02/03/my-first-custom-excel-ribbon-using-excel-dna">My First Custom Excel Ribbon using Excel-DNA</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><!-- wp:paragraph -->
<p><strong>That's all folks!</strong></p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3420</wp:post_id>
		<wp:post_date><![CDATA[2023-03-14 05:50:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-03-14 05:50:39]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-03-27 15:41:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-03-27 15:41:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[my-first-custom-excel-dna-add-in-dotnet6-edition]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_4dd08ec21182a1e329467a707839a5fc]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[u:wpcom-ufa-v3-beta:1679931699]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1678773042]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[82290516287]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>16188</wp:comment_id>
			<wp:comment_author><![CDATA[Tiger]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tigeroffset@outlook.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[122.118.132.117]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2023-07-10 01:08:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2023-07-10 01:08:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have problem to add custom ribbon into this project. Can you please make another example with ribbon? Thanks a lot!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1688951306.059728;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1688955059.503653;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Express and Typescript skeleton]]></title>
		<link>https://andysprague.com/?p=3788</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andysprague.com/?p=3788</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This blog demonstrates an <em>opinionated </em>starter app for creating a REST API with Express and Typescript. It is <em>not a tutorial</em> but what I found was a lot of tutorials stop short of moving any code out of the index.js file, and that isn't going to scale. Here - I set out a sensible initial project structure that should allow code to be organized in a sensible manner as your app grows.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>What does it not have?</strong> Authentication, middleware<em>.</em> Maybe I'll update this blog in the future to add them in. Or, my avid reader, raise a PR to the repo and I'll take a look!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"style":{"elements":{"link":{"color":{"text":"var:preset|color|primary"}}}},"textColor":"primary"} -->
<p class="has-primary-color has-text-color has-link-color">Side note: please let me know if there is a tool or framework that you like that does this already to good effect. I tried Feathers, but it was way <em>too </em>opinionated for me.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">I just want the code</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Go here if you want to see the answer's without taking the exam: </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/andysprague44/rest-express-template">https://github.com/andysprague44/rest-express-template</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">The structure</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><strong>index.ts</strong>: The entrypoint to the app is index.ts, which is as lightweight as possible. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>app.ts</strong>: The core definition of the application is moved to app.ts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>src/routes/</strong>: Each endpoint is moved to a new file in this folder and registered in app.ts. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>src/controller/: </strong>The routes immediately defers to a controller. The controller routes the request to relevant service or services. Some business logic might sit in the controller but it should be kept to a minimum.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>src/services/: </strong>The services handle an actual request and call to other dependencies e.g. the database.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And that's kind of it!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">How to run it</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Follow through in the README, or:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">npm install
npm run dev</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>The "npm run dev" command relies on a script in the package.json file, and actually runs: <code>ts-node index.ts</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The server is now running on <code>http://localhost:3000</code>. You can now run API requests through the browser, e.g. <a href="http://localhost:3000/users"><code>http://localhost:3000/</code></a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To query from postman, import the<code> RestExpressTemplate.postman_collection.json</code> file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Prisma</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Optional - choose to ignore. However, Prisma is an ORM layer (sort of) that you can put on top of most types of databases. I'm not going to write about it here, so see <a href="https://www.prisma.io/">https://www.prisma.io/</a> for more.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Docker</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Also optional - the template has docker and docker-compose support.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"bash"} -->
<pre class="wp-block-syntaxhighlighter-code">docker build . -t rest-express-app
docker run -p 8080:8080 -d rest-express-app</pre>
<!-- /wp:syntaxhighlighter/code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3788</wp:post_id>
		<wp:post_date><![CDATA[2023-09-11 18:23:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-09-11 18:23:28]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-09-11 18:23:28]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[footnotes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Syncing from DynamoDB to Redshift]]></title>
		<link>https://andysprague.com/2023/12/08/sycning-from-dyanmodb-to-redshift/</link>
		<pubDate>Fri, 08 Dec 2023 20:13:41 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andysprague.com/?p=3999</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This blog lays out a low-cost approach to syncing incrementally (and/or running full exports) from DynamoDB table(s) to Redshift*, using only S3 and AWS Lambda, with <a href="https://aws.github.io/chalice/">Chalice</a> used as the framework for defining the application code, in python 3.9.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>* you could probably switch this for another data warehouse like <code>clickhouse</code> without too much effort.</em></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Send me the code!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As always, don't feel obliged to read, here is the code! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/andysprague44/dynamodb-to-redshift" target="_blank" rel="noreferrer noopener">https://github.com/andysprague44/dynamodb-to-redshift</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'd suggest opening up the codebase as you read the below, as it will help understand what is going on. I'm not going to share any code snippets in the actual blog.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Should I use it?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Sure, it's production ready! But not if you have any of the following considerations:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>Streaming use-cases, for this I'd suggest using <code>Amazon Kinesis Data Streams for DynamoDB</code> and <code>AWS Glue</code>. There is plenty of material out there if you look.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Handling many schema migrations and other maintenance considerations, if you need this look at out-of-the-box data ETL solutions<br>like FiveTran, or move to an all-in solution like Databricks or Snowflake.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Complex data transformations, for example breaking a list column in DynamoDB to multiple rows, I'd suggest adding <code>AWS Glue</code> if you need this.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">So, how does it work?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Follow along with the following, starting from the file <em>src/runtime/app.py</em>, where all the lamdba functions are actually defined. If you are not familiar with Chalice, that's ok, but you might want to come back to it: <a href="https://aws.github.io/chalice/">Chalice</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are 3 steps, each a lamdba function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">1. Export DynamoDB to S3</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first lamdba <code>export_to_s3</code> exports from each table you want to sync, either a FULL_EXPORT or an INCREMENTAL_EXPORT (both cases are handled, full export might be better suited for slowly moving dimension tables).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the incremental export mode, it uses a file stored in s3 <code>last-export-time.txt</code>, which is written to at the end of the lambda run. The next scheduled run can read this and use as the start time for the next period, to ensure no data is lost. On first run, it only takes a 24 hour period, so you should always run a full export for a new table first.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note, the lambda function returns immediately, but the export runs async from the dynamo DB side, and takes 5 plus minutes depending on table size. The export is ultimately complete when a file <code>manifest-summary.json</code> is written to s3.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">2. Process in s3</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The next lambda <code>redshift_manifest_creation</code>, listens for creation of this <code>manifest-summary.json</code>, and,</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>a. pre-processes the data if required*, and</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>b. creates a <code>redshift.manifest</code> that redshift can use to ingest the data</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>This manifest file contains:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>a list of urls, which point to the data files to ingest, e.g.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>a jsonpaths object, that defines mapping between dynamodb nested json and the redshift table. Note, THE COLUMN ORDERS MUST MATCH.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>some additional meta-data required by our next lambda (i.e. the dynamodb table name, time format, is incremental)</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>*- ** For INCREMENTAL_EXPORT, there is a need to pre-process the files, so redshift can handle deletes, updates, and inserts gracefully**</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">3. Import to Redshift</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The next lambda <code>redshift_upsert</code> listens for the creation of the <code>redshift.manifest</code> file in step 1, and uses it to upsert data to redshift.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>For incremental export mode, it uses a MERGE operation.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>For full export mode, it replaces the contents of the target table.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:paragraph {"fontSize":"x-large"} -->
<p class="has-x-large-font-size"><strong>That's all folks!</strong></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3999</wp:post_id>
		<wp:post_date><![CDATA[2023-12-08 20:13:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-08 20:13:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-08 20:15:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-08 20:15:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sycning-from-dyanmodb-to-redshift]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="dynamodb"><![CDATA[DynamoDB]]></category>
		<category domain="post_tag" nicename="redshift"><![CDATA[Redshift]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[reader_suggested_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[["WordPress","DevOps","Google","Photography","Apple","Network Administration","Cisco"]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[firehose_sent]]></wp:meta_key>
		<wp:meta_value><![CDATA[1702066423]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpcom_is_first_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1702066425]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[90116485923]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v4:1702066807]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[CDK Lambda layer]]></title>
		<link>https://andysprague.com/?p=4274</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andysprague.com/?p=4274</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Dir structure</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>app.py<br>cdk<br>- stack.py<br>service<br>- lambdas<br>    - my_request_handler<br>        - index.py, containing "handler"<br>        - requirements.txt<br>   - utils<br>        - requirements.txt<br>tests<br></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">powertools_layer = PythonLayerVersion.lambda_powertools(
            stack=self,
            config=config,
        )

utils_layer = PythonLayerVersion(
            stack=self,
            config=config,
            entry=os.path.join(source_dir, "lambdas", "utils"),
        )

</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Constructs</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">import os
from aws_cdk import (
    Stack,
    aws_lambda as _lambda,
    BundlingOptions,
    RemovalPolicy,
)
from typing import Optional
from bw_cdk.config_base import ConfigBase


class PythonLayerVersion(_lambda.LayerVersion):

    def __init__(
        self,
        stack: Stack,
        config: ConfigBase,
        entry: str,
        id: Optional[str] = None,
        description: Optional[str] = None,
        runtime: Optional[_lambda.Runtime] = _lambda.Runtime.PYTHON_3_11,
        architecture: Optional[_lambda.Runtime] = _lambda.Architecture.ARM_64,
        **kwargs,
    ):
        """Creates a lamdba layer, including packaging from requirements.txt, for shared code in the stack.

        Args:
            stack [Stack]: CDK stack
            config [ConfigBase]: configuration object
            entry [str]: full path to the lambda layer directory e.g. "&lt;project&gt;/service/utils"
            id [Optional[str]]: name to give the lambda layer in the stack
            description [Optional[str]]: short description of the lambda layer
            runtime [Optional[aws_cdk.aws_lambda.Runtime]]: lambda runtime, default is python 3.11
            architecture [Optional[aws_cdk.aws_lambda.Architecture]]: lambda architecture, default is ARM_64
            **kwargs: any other kwargs to pass down to cdk construct (see https://github.com/aws/aws-cdk/tree/main/packages/aws-cdk-lib/aws-lambda)
        """
        module_name = os.path.split(entry)[-1]

        if id is None:
            id = f"{config.stack_name}-{module_name.replace('_', '-')}-lambda-layer"

        if description is None:
            description = f"{module_name} lambda layer for stack '{config.stack_name}'"

        super().__init__(
            stack,
            id=id,
            description=description,
            layer_version_name=f"{config.stack_name}-{module_name.replace('_', '-')}-{architecture.to_string()}",
            removal_policy=RemovalPolicy.DESTROY,
            code=_lambda.Code.from_asset(
                entry,
                bundling=BundlingOptions(
                    image=runtime.bundling_image,
                    command=[
                        "bash",
                        "-c",
                        f"pip install -r requirements.txt -t /asset-output/python &amp;&amp; cp -au . /asset-output/python/{module_name}",
                    ],
                ),
            ),
            compatible_runtimes=[runtime],
            compatible_architectures=[architecture],
            **kwargs,
        )

    @staticmethod
    def lambda_powertools(
        stack: Stack,
        config: ConfigBase,
        architecture: _lambda.Architecture = _lambda.Architecture.ARM_64,
        layer_version: int = 67,
    ) -&gt; _lambda.LayerVersion:
        """Returns the public AWS Lambda Powertools layer."""
        arch_suffix = (
            "-Arm64"
            if architecture.to_string() == _lambda.Architecture.ARM_64.to_string()
            else ""
        )
        arn = f"arn:aws:lambda:{config.aws_region}:017000801446:layer:AWSLambdaPowertoolsPythonV2{arch_suffix}:{layer_version}"
        return _lambda.LayerVersion.from_layer_version_arn(
            stack,
            id="lambda-powertools-lambda-layer",
            layer_version_arn=arn,
        )</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">from aws_cdk import (
    Stack,
    aws_iam as iam,
    aws_lambda as _lambda,
    Duration,
    BundlingOptions,
)
from aws_cdk.aws_ec2 import (
    Vpc,
    Subnet,
    SecurityGroup,
)
import os
from typing import Optional, List
from bw_cdk.config_base import ConfigBase


class PythonFunction(_lambda.Function):

    def __init__(
        self,
        stack: Stack,
        config: ConfigBase,
        entry: str,
        handler: str,
        function_name: Optional[str] = None,
        id: Optional[str] = None,
        description: Optional[str] = None,
        vpc: Optional[Vpc] = None,
        vpc_subnets: Optional[List[Subnet]] = None,
        security_groups: Optional[List[SecurityGroup]] = None,
        role: Optional[iam.IRole] = None,
        events: Optional[List[_lambda.IEventSource]] = None,
        layers: Optional[List[_lambda.ILayerVersion]] = None,
        runtime: Optional[_lambda.Runtime] = _lambda.Runtime.PYTHON_3_11,
        architecture: Optional[_lambda.Architecture] = _lambda.Architecture.ARM_64,
        **kwargs,
    ):
        """Creates a *python 3.11* ARM64 lamdba function, including packaging from requirements.txt, with sensible defaults.

        Args:
            stack [Stack]: CDK stack
            config [ConfigBase]: configuration object
            entry [str]: full path to the lambda function directory e.g. "&lt;project&gt;/service/lamdbas/my_function"
            handler [str]: name of the handler function e.g. index.handler, where `index.py` has a function `handler`
            function_name [Optional[str]]: name of the lambda function
            id [Optional[str]]: name to give the lambda function in the stack
            description [Optional[str]]: short description of the lambda function
            role [Optional[iam.IRole]]: IAM role for the lambda function
            vpc [Optional[Vpc]]: Id of VPC to connect lambda to
            vpc_subnets [Optional[List[Subnet]]: when configured with VPC, the subnets to use
            security_groups [Optional[List[SecurityGroup]]: optional list of security groups for lambda
            events [Optional[List[_lambda.IEventSource]]]: list of event sources to trigger the lambda function
            layers [Optional[List[_lambda.ILayerVersion]]]: list of lambda layers to include in the function, e.g. utils, power tools
            runtime [Optional[_lambda.Runtime]]: lambda runtime, default is python 3.11
            architecture [Optional[_lambda.Architecture]]: lambda architecture, default is ARM64
            **kwargs: any other kwargs to pass down to cdk construct (see https://github.com/aws/aws-cdk/tree/main/packages/aws-cdk-lib/aws-lambda)
        """
        if id is None:
            id = f"{config.stack_name}-lambda-function"
        if function_name is None:
            function_name = (
                f"{config.stack_name}-{os.path.split(entry)[-1].replace('_', '-')}"
            )
        super().__init__(
            stack,
            id=id,
            function_name=function_name,
            description=description,
            runtime=runtime,
            architecture=architecture,
            code=_lambda.Code.from_asset(
                path=entry,
                bundling=BundlingOptions(
                    image=runtime.bundling_image,
                    command=[
                        "bash",
                        "-c",
                        "pip install -r requirements.txt -t /asset-output &amp;&amp; cp -au . /asset-output",
                    ],
                ),
            ),
            handler=handler,
            role=role,
            vpc=vpc,
            vpc_subnets=vpc_subnets,
            security_groups=security_groups,
            memory_size=kwargs.pop("memory_size", 1024),
            timeout=kwargs.pop("timeout", Duration.minutes(5)),
            logging_format=_lambda.LoggingFormat.JSON,
            system_log_level=_lambda.SystemLogLevel.INFO.value,
            application_log_level=_lambda.ApplicationLogLevel.INFO.value,
            insights_version=_lambda.LambdaInsightsVersion.VERSION_1_0_229_0,
            tracing=_lambda.Tracing.ACTIVE,
            events=events,
            environment={
                **kwargs.pop("environment", {}),
                "POWERTOOLS_METRICS_NAMESPACE": config.service,
                "POWERTOOLS_SERVICE_NAME": config.stack_name,
                "POWERTOOLS_DEV": str(config.is_dev),
            },
            layers=layers,
            **kwargs,
        )

        if vpc is not None:
            self.role.add_managed_policy(
                iam.ManagedPolicy.from_aws_managed_policy_name(
                    "service-role/AWSLambdaVPCAccessExecutionRole"
                )
            )

            self.add_to_role_policy(
                iam.PolicyStatement(
                    actions=[
                        "ec2:AssignPrivateIpAddresses",
                        "ec2:CreateNetworkInterface",
                        "ec2:DeleteNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:UnassignPrivateIpAddresses",
                    ],
                    resources=[
                        "*"
                    ],  # aws examples have all, but we might want to narrow to current vpc arn
                )
            )


# TODO cloudwatch alert if lamdba times out?
# if (fn.timeout) {
#     new cloudwatch.Alarm(this, `MyAlarm`, {
#         metric: fn.metricDuration().with({
#             statistic: 'Maximum',
#         }),
#         evaluationPeriods: 1,
#         datapointsToAlarm: 1,
#         threshold: fn.timeout.toMilliseconds(),
#         treatMissingData: cloudwatch.TreatMissingData.IGNORE,
#         alarmName: 'My Lambda Timeout',
#     });
# }
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:syntaxhighlighter/code {"language":"python"} -->
<pre class="wp-block-syntaxhighlighter-code">from aws_cdk import (
    Stack,
    aws_iam as iam,
)
from typing import Optional, List
from bw_cdk.config_base import ConfigBase


class LambdaRole(iam.Role):
    def __init__(
        self,
        scope: Stack,
        config: ConfigBase,
        role_id: Optional[str] = None,
        role_name: Optional[str] = None,
        s3_bucket_arns: Optional[List[str]] = None,
        secret_arns: Optional[List[str]] = None,
    ):

        if role_id is None:
            role_id = f"{config.stack_name}-lambda-role"

        if role_name is None:
            role_name = f"{config.stack_name}-lambda-role"

        super().__init__(
            scope,
            role_id,
            role_name=role_name,
            assumed_by=iam.ServicePrincipal("lambda.amazonaws.com"),
            managed_policies=[
                iam.ManagedPolicy.from_aws_managed_policy_name(
                    "service-role/AWSLambdaBasicExecutionRole"
                ),
                # TODO - ezra; we _might_ want to make this an optional policy grant, gated on a vpc_arn param
                iam.ManagedPolicy.from_aws_managed_policy_name(
                    "service-role/AWSLambdaVPCAccessExecutionRole"
                ),
            ],
        )

        if s3_bucket_arns:
            s3_bucket_arns = set(s3_bucket_arns)
            for bucket_arn in s3_bucket_arns.copy():
                if not bucket_arn.endswith("/*"):
                    s3_bucket_arns.add(f"{bucket_arn}/*")
            s3_bucket_arns = list(s3_bucket_arns)
            s3_policy = iam.PolicyStatement(
                effect=iam.Effect.ALLOW,
                actions=["s3:Create*", "s3:Put*", "s3:Get*", "s3:Delete*"],
                resources=s3_bucket_arns,
            )
            self.add_to_policy(s3_policy)

        if secret_arns:
            secrets_policy = iam.PolicyStatement(
                effect=iam.Effect.ALLOW,
                actions=["secretsmanager:Get*", "secretsmanager:Describe*"],
                resources=secret_arns,
            )
            self.add_to_policy(secrets_policy)


    def grant_kinesis_stream(self, stream_arn: str):
        self.add_managed_policy(
            iam.ManagedPolicy.from_aws_managed_policy_name(
                "service-role/AWSLambdaKinesisExecutionRole"
            )
        )
        self.add_to_policy(
            iam.PolicyStatement(
                effect=iam.Effect.ALLOW,
                actions=[
                    "kinesis:DescribeStream",
                    "kinesis:DescribeStreamSummary",
                    "kinesis:GetRecords",
                    "kinesis:GetShardIterator",
                    "kinesis:ListShards",
                    "kinesis:ListStreams",
                    "kinesis:SubscribeToShard",
                ],
                resources=[stream_arn],
            )
        )
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>The index.py</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">import os
from http import HTTPStatus
from logging import traceback
from aws_lambda_powertools import Logger, Tracer
from aws_lambda_powertools.utilities.typing import LambdaContext
from aws_lambda_powertools.utilities.data_classes import (
    event_source,
    KinesisStreamEvent,
)


try:
    from .model import KinesisStreamPtlSchoolSignupRecord
    from .config import Config

    from service.lambdas.utils.hubspot.hubspot_client import HubspotClient
    from service.lambdas.utils.hubspot.model import *
    from service.lambdas.utils.postgres.postgres_client import PostgresClient
    from service.lambdas.utils.s3.s3_client import S3Client
    from service.lambdas.utils.slack.slack_client import SlackClient
    from service.lambdas.utils.mixpanel.mixpanel_client import MixpanelClient
    from service.lambdas.utils.mixpanel.model import MixpanelAttributionData
except:
    # no relative imports from top level when deployed to lamdba
    from model import KinesisStreamPtlSchoolSignupRecord
    from config import Config

    # no 'service.lambdas' when deployed to lamdba
    from utils.hubspot.hubspot_client import HubspotClient  # type: ignore
    from utils.hubspot.model import *  # type: ignore
    from utils.postgres.postgres_client import PostgresClient  # type: ignore
    from utils.s3.s3_client import S3Client  # type: ignore
    from utils.slack.slack_client import SlackClient  # type: ignore
    from utils.mixpanel.mixpanel_client import MixpanelClient  # type: ignore
    from utils.mixpanel.model import MixpanelAttributionData  # type: ignore


logger = Logger()
tracer = Tracer()
config = Config()

s3_client: S3Client = None
pg_client: PostgresClient = None
mixpanel_client: MixpanelClient = None
hubspot_client: HubspotClient = None
slack_client: SlackClient = None


@logger.inject_lambda_context
@tracer.capture_lambda_handler
@event_source(data_class=KinesisStreamEvent)
def handler(event: KinesisStreamEvent, context: LambdaContext) -&gt; dict:
    """Handle kinesis stream event for PTL school signup workflow to hubspot form fill.

    Returns:
        dict: of `statusCode` and `body`
    """
    logger.info(f"Received kinesis stream event: {event}, context: {context}")

    global s3_client
    s3_client = s3_client or S3Client(config.S3_BUCKET)

    global pg_client
    pg_client = pg_client or PostgresClient(config.DB_CONN_SECRET_NAME)

    global mixpanel_client
    mixpanel_client = mixpanel_client or MixpanelClient(
        config.MIXPANEL_AUTH_SECRET_NAME
    )

    global hubspot_client
    hubspot_client = hubspot_client or HubspotClient(config.HS_AUTH_SECRET_NAME)

    global slack_client
    slack_client = slack_client or SlackClient(config.SLACK_WEBHOOK_SECRET_NAME)

    # Parse records, and drop dupes by event_id
    unique_payloads = []
    event_ids = None
    try:
        event_ids = ",".join([x.get("eventID", "?") for x in event.get("Records", [])])
        used = set()
        for x in event.records:
            if x.event_id in used:
                logger.warning(f"Duplicate payloads detected: {x.event_id}!")
                continue
            unique_payloads.append(KinesisStreamPtlSchoolSignupRecord(x))
            used.add(x.event_id)
    except Exception as ex:
        slack_client.send(
            f"Failed '{context.function_name}' lambda for {event_ids}.\n\nUnable to parse payload.\n{ex}"
        )

    failures = []
    for payload in unique_payloads:
        try:
            __process_record(
                payload=payload,
                context=context,
                slack_client=slack_client,
            )
        except Exception as ex:
            failures.append(ex)

    if failures:
        error_msgs = "\n  - ".join([str(x) for x in failures])
        slack_client.send(
            f"Failed '{context.function_name}' lambda for {event_ids=}. Errors:\n  - {error_msgs}"
        )
        raise ExceptionGroup(
            f"Error(s) found during '{context.function_name}' lambda execution.",
            failures,
        )

    logger.info(f"Function completed succesfully!")
    return {
        "statusCode": 200,
        "body": [x.event_id for x in unique_payloads],
    }


def __process_record(
    payload: KinesisStreamPtlSchoolSignupRecord,
    context: LambdaContext,
    slack_client: SlackClient,
):
    logger.info(f"Starting payload {payload.event_id}")

    hubspot_payload = None

    try:
        s3_client.write(
            s3_path=s3_client.construct_s3_path(
                event_id=payload.event_id,
                context=context,
                status=HTTPStatus.PROCESSING,
                timestamp=payload.event_timestamp,
            ),
            event_id=payload.event_id,
            event_payload=payload._json_data,
            status=HTTPStatus.PROCESSING,
        )

        logger.info(f"Getting required data from postgres")
        try:
            pg_client.connect()
            school_data = pg_client.get_school_data(payload.school_uuid)
        finally:
            pg_client.close()

        logger.info(f"Getting attribution data from mixpanel")
        attribution_data: MixpanelAttributionData = mixpanel_client.download_data(
            school_uuid=school_data.school_uuid,
            email=school_data.owner_email,
            slack_client=slack_client,
        )

        logger.info(f"Posting form to hubspot")
        hubspot_payload = HubspotPtlSchoolSignupFormPayload(
            firstname=school_data.owner_first_name,
            lastname=school_data.owner_last_name,
            email=school_data.owner_email,
            phone=school_data.phone,
            company=school_data.company,
            ftl_number_of_students=school_data.stated_student_count,
            ftl_program_type=FTLProgramTypeEnum(school_data.program_type.upper()),
            state=school_data.state.upper(),
            brightwheel_plan=school_data.brightwheel_plan,
            ptl_form_completed_date=payload.event_timestamp.date(),
            utm_source=attribution_data.utm_source if attribution_data else None,
            utm_medium=attribution_data.utm_medium if attribution_data else None,
            utm_campaign=attribution_data.utm_campaign if attribution_data else None,
            utm_content=attribution_data.utm_content if attribution_data else None,
            utm_term=attribution_data.utm_term if attribution_data else None,
        )
        hubspot_client.post_form(
            url=config.HS_PTL_SCHOOL_SIGNUP_FORM_ENDPOINT,
            payload=hubspot_payload,
        )

        logger.info(f"Writing to s3")
        s3_client.write(
            s3_path=s3_client.construct_s3_path(
                event_id=payload.event_id,
                context=context,
                status=HTTPStatus.OK,
                timestamp=payload.event_timestamp,
            ),
            event_id=payload.event_id,
            event_payload=payload._json_data,
            status=HTTPStatus.OK,
            hubspot_payload=hubspot_payload,
        )

        logger.info(f"Completed payload {payload.event_id}")

    except Exception as ex:
        logger.error(f"Error processing payload '{payload.event_id}': {ex}")
        s3_path = s3_client.construct_s3_path(
            event_id=payload.event_id,
            context=context,
            status=HTTPStatus.INTERNAL_SERVER_ERROR,
            timestamp=payload.event_timestamp,
        )
        s3_client.write(
            s3_path=s3_path,
            event_id=payload.event_id,
            event_payload=payload._json_data,
            status=HTTPStatus.INTERNAL_SERVER_ERROR,
            hubspot_payload=hubspot_payload,
            error_msg=str(ex),
        )
        logger.info(
            f"Error details written to 's3://{s3_client.s3_bucket}/{s3_path}' for '{payload.event_id}'"
        )
        raise
</pre>
<!-- /wp:syntaxhighlighter/code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4274</wp:post_id>
		<wp:post_date><![CDATA[2024-04-10 18:35:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-10 18:35:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-10 18:35:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_memberships_contains_paywalled_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_memberships_contains_paid_content]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[reader_suggested_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[["AWS","Python","Lambda","AWS Lambda","Serverless"]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[I made an AI chatbot!]]></title>
		<link>https://andysprague.com/2024/06/04/i-made-an-ai-chatbot/</link>
		<pubDate>Tue, 04 Jun 2024 22:50:27 +0000</pubDate>
		<dc:creator><![CDATA[andysprague44]]></dc:creator>
		<guid isPermaLink="false">https://andysprague.com/?p=4448</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Cool! I would write a whole blog about it but honestly, it took 10 mins and you should just go to vercel.com and let them do the hard work!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I might bulk this project (and blog) out beyond the vercel.com template, might not. <em>Maybe come back later and find out?</em></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">I just want the code</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://github.com/andysprague44/pollution-free-india-chatbot/tree/main">https://github.com/andysprague44/pollution-free-india-chatbot/tree/main</a></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:heading -->
<h2 class="wp-block-heading">I just want the chatbot</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Do you want to generate a personalized email to send to the Delhi CM to demand action on air pollution? Of course you do!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://pollution-free-india-chatbot.vercel.app">https://pollution-free-india-chatbot.vercel.app</a></p>
<!-- /wp:paragraph -->

<!-- wp:separator -->
<hr class="wp-block-separator has-alpha-channel-opacity" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>That's all folks!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4448</wp:post_id>
		<wp:post_date><![CDATA[2024-06-04 22:50:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-06-04 22:50:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-06-04 22:50:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-06-04 22:50:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-made-an-ai-chatbot]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d5bb477f8f6bec48d118e2668a7d35a7]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[firehose_sent]]></wp:meta_key>
		<wp:meta_value><![CDATA[1717541429]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[95173580226]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1717541430]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elasticsearch_data_sharing_indexed_on]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-06-04 22:52:15]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	